
bin/Debug/proj3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c2  00800100  00002d5c  00002df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00002d34  00002d34  00002dc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001f2  008003c2  008003c2  000030b2  2**0
                  ALLOC
  4 .stab         000024c0  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000011ed  00000000  00000000  00005574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006761  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006774  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  000067b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00006da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000734a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00007364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_6>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__vector_11>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_14>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__vector_18>
      4c:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__vector_19>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_22>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      68:	8b 03       	fmulsu	r16, r19
      6a:	43 04       	cpc	r4, r3
      6c:	13 04       	cpc	r1, r3
      6e:	bb 03       	fmulsu	r19, r19
      70:	c5 04       	cpc	r12, r5
      72:	88 04       	cpc	r8, r8
      74:	e7 03       	fmuls	r22, r23
      76:	9d 04       	cpc	r9, r13
      78:	73 04       	cpc	r7, r3

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	ec e5       	ldi	r30, 0x5C	; 92
      8e:	fd e2       	ldi	r31, 0x2D	; 45
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	a2 3c       	cpi	r26, 0xC2	; 194
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	25 e0       	ldi	r18, 0x05	; 5
      9e:	a2 ec       	ldi	r26, 0xC2	; 194
      a0:	b3 e0       	ldi	r27, 0x03	; 3
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a4 3b       	cpi	r26, 0xB4	; 180
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
      b0:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <delay_init>:
static unsigned int limit[2] = {0, 0};
static unsigned char initialized = 0;

//typedef void (*func_t)(void);

void delay_init() {
      b8:	cf 93       	push	r28
      ba:	df 93       	push	r29
      bc:	00 d0       	rcall	.+0      	; 0xbe <delay_init+0x6>
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
    if (!initialized) {
      c2:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <initialized>
      c6:	88 23       	and	r24, r24
      c8:	89 f5       	brne	.+98     	; 0x12c <delay_init+0x74>
        /*

        unsigned int PRESCALER_VALUE = 64;
        */

        unsigned int COMPARE_VALUE = 250;
      ca:	8a ef       	ldi	r24, 0xFA	; 250
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	9a 83       	std	Y+2, r25	; 0x02
      d0:	89 83       	std	Y+1, r24	; 0x01



        OCR0A = COMPARE_VALUE-1; // Set timer0 compare value to 250-1 = 249
      d2:	87 e4       	ldi	r24, 0x47	; 71
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	29 81       	ldd	r18, Y+1	; 0x01
      d8:	21 50       	subi	r18, 0x01	; 1
      da:	fc 01       	movw	r30, r24
      dc:	20 83       	st	Z, r18

        // Set CTC mode and correct clock divisor
        TCCR0A |= (1 << WGM01); // Set CTC mode //WGM01
      de:	84 e4       	ldi	r24, 0x44	; 68
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	24 e4       	ldi	r18, 0x44	; 68
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	f9 01       	movw	r30, r18
      e8:	20 81       	ld	r18, Z
      ea:	22 60       	ori	r18, 0x02	; 2
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
        TCCR0B |= (1 << CS01) | (1 << CS00); // Set clock divisor (prescaler value = 64)  CS00/CS01
      f0:	85 e4       	ldi	r24, 0x45	; 69
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	25 e4       	ldi	r18, 0x45	; 69
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	23 60       	ori	r18, 0x03	; 3
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18

        // Enable global interrupts
        // __builtin_avr_sei();
        SREG |= (1<<I_SREG);
     102:	8f e5       	ldi	r24, 0x5F	; 95
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	2f e5       	ldi	r18, 0x5F	; 95
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	f9 01       	movw	r30, r18
     10c:	20 81       	ld	r18, Z
     10e:	20 68       	ori	r18, 0x80	; 128
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18

        // Enable interrupts on output compare A
        TIMSK0 |= (1 << OCIE0A);  //OCIE0A
     114:	8e e6       	ldi	r24, 0x6E	; 110
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	2e e6       	ldi	r18, 0x6E	; 110
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	f9 01       	movw	r30, r18
     11e:	20 81       	ld	r18, Z
     120:	22 60       	ori	r18, 0x02	; 2
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18

        // Stop further initialization by setting initialized to 1
        initialized = 1;
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <initialized>
    }
}
     12c:	00 00       	nop
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	08 95       	ret

00000138 <delay_get>:


unsigned int delay_get(unsigned int num) {
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	00 d0       	rcall	.+0      	; 0x13e <delay_get+0x6>
     13e:	00 d0       	rcall	.+0      	; 0x140 <delay_get+0x8>
     140:	00 d0       	rcall	.+0      	; 0x142 <delay_get+0xa>
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	9e 83       	std	Y+6, r25	; 0x06
     148:	8d 83       	std	Y+5, r24	; 0x05

    unsigned int count_value;

    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << I_SREG);
     14a:	8f e5       	ldi	r24, 0x5F	; 95
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	fc 01       	movw	r30, r24
     150:	80 81       	ld	r24, Z
     152:	08 2e       	mov	r0, r24
     154:	00 0c       	add	r0, r0
     156:	99 0b       	sbc	r25, r25
     158:	80 78       	andi	r24, 0x80	; 128
     15a:	99 27       	eor	r25, r25
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01

    // Disable interrupts
    // __builtin_avr_cli(); //
    SREG &= ~(1<<I_SREG);
     160:	8f e5       	ldi	r24, 0x5F	; 95
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	2f e5       	ldi	r18, 0x5F	; 95
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	f9 01       	movw	r30, r18
     16a:	20 81       	ld	r18, Z
     16c:	2f 77       	andi	r18, 0x7F	; 127
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18

    // Get the delay_count[num] value
    count_value = delay_count[num];
     172:	8d 81       	ldd	r24, Y+5	; 0x05
     174:	9e 81       	ldd	r25, Y+6	; 0x06
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	8e 53       	subi	r24, 0x3E	; 62
     17c:	9c 4f       	sbci	r25, 0xFC	; 252
     17e:	fc 01       	movw	r30, r24
     180:	80 81       	ld	r24, Z
     182:	91 81       	ldd	r25, Z+1	; 0x01
     184:	9c 83       	std	Y+4, r25	; 0x04
     186:	8b 83       	std	Y+3, r24	; 0x03

    // Restore global interrupt state
    if (sreg_state) {
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	89 2b       	or	r24, r25
     18e:	49 f0       	breq	.+18     	; 0x1a2 <delay_get+0x6a>
        SREG |= (1<<I_SREG); //Enable interrupts
     190:	8f e5       	ldi	r24, 0x5F	; 95
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	2f e5       	ldi	r18, 0x5F	; 95
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	f9 01       	movw	r30, r18
     19a:	20 81       	ld	r18, Z
     19c:	20 68       	ori	r18, 0x80	; 128
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
    }

    // Return the count value
    return count_value;
     1a2:	8b 81       	ldd	r24, Y+3	; 0x03
     1a4:	9c 81       	ldd	r25, Y+4	; 0x04
}
     1a6:	26 96       	adiw	r28, 0x06	; 6
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	cd bf       	out	0x3d, r28	; 61
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <delay_set>:


void delay_set(unsigned int num, unsigned int time) {
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <delay_set+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <delay_set+0x8>
     1c0:	00 d0       	rcall	.+0      	; 0x1c2 <delay_set+0xa>
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	9c 83       	std	Y+4, r25	; 0x04
     1c8:	8b 83       	std	Y+3, r24	; 0x03
     1ca:	7e 83       	std	Y+6, r23	; 0x06
     1cc:	6d 83       	std	Y+5, r22	; 0x05

    // If not initialized, initialize the delay counter
    if (!initialized) {
     1ce:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <initialized>
     1d2:	88 23       	and	r24, r24
     1d4:	11 f4       	brne	.+4      	; 0x1da <delay_set+0x22>
        delay_init();
     1d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <delay_init>
    }
    // Get global interrupt enable bit state
    unsigned int sreg_state = SREG & (1 << 7);
     1da:	8f e5       	ldi	r24, 0x5F	; 95
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	fc 01       	movw	r30, r24
     1e0:	80 81       	ld	r24, Z
     1e2:	08 2e       	mov	r0, r24
     1e4:	00 0c       	add	r0, r0
     1e6:	99 0b       	sbc	r25, r25
     1e8:	80 78       	andi	r24, 0x80	; 128
     1ea:	99 27       	eor	r25, r25
     1ec:	9a 83       	std	Y+2, r25	; 0x02
     1ee:	89 83       	std	Y+1, r24	; 0x01

    // Disable Interrupts
    SREG &= ~(1<<I_SREG); //cli()
     1f0:	8f e5       	ldi	r24, 0x5F	; 95
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	2f e5       	ldi	r18, 0x5F	; 95
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	20 81       	ld	r18, Z
     1fc:	2f 77       	andi	r18, 0x7F	; 127
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18

    // Set the limit for delay[num] and clear the count for delay[num]
    limit[num] = time;
     202:	8b 81       	ldd	r24, Y+3	; 0x03
     204:	9c 81       	ldd	r25, Y+4	; 0x04
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	8a 53       	subi	r24, 0x3A	; 58
     20c:	9c 4f       	sbci	r25, 0xFC	; 252
     20e:	2d 81       	ldd	r18, Y+5	; 0x05
     210:	3e 81       	ldd	r19, Y+6	; 0x06
     212:	fc 01       	movw	r30, r24
     214:	31 83       	std	Z+1, r19	; 0x01
     216:	20 83       	st	Z, r18
    delay_count[num] = 0;
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	9c 81       	ldd	r25, Y+4	; 0x04
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	8e 53       	subi	r24, 0x3E	; 62
     222:	9c 4f       	sbci	r25, 0xFC	; 252
     224:	fc 01       	movw	r30, r24
     226:	11 82       	std	Z+1, r1	; 0x01
     228:	10 82       	st	Z, r1

    // Restore global interrupt state
    if (sreg_state) {
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	89 2b       	or	r24, r25
     230:	49 f0       	breq	.+18     	; 0x244 <delay_set+0x8c>
        SREG |= (1<<I_SREG);   //sei()
     232:	8f e5       	ldi	r24, 0x5F	; 95
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	2f e5       	ldi	r18, 0x5F	; 95
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	f9 01       	movw	r30, r18
     23c:	20 81       	ld	r18, Z
     23e:	20 68       	ori	r18, 0x80	; 128
     240:	fc 01       	movw	r30, r24
     242:	20 83       	st	Z, r18
    }
}
     244:	00 00       	nop
     246:	26 96       	adiw	r28, 0x06	; 6
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	f8 94       	cli
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	0f be       	out	0x3f, r0	; 63
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	08 95       	ret

00000258 <delay_isdone>:


unsigned int delay_isdone(unsigned int num) {
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	00 d0       	rcall	.+0      	; 0x25e <delay_isdone+0x6>
     25e:	00 d0       	rcall	.+0      	; 0x260 <delay_isdone+0x8>
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	9c 83       	std	Y+4, r25	; 0x04
     266:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int result = 0;
     268:	1a 82       	std	Y+2, r1	; 0x02
     26a:	19 82       	std	Y+1, r1	; 0x01

    // If delay_count[num] equals limit[num], set result to 1
    if (delay_count[num] == limit[num]) {
     26c:	8b 81       	ldd	r24, Y+3	; 0x03
     26e:	9c 81       	ldd	r25, Y+4	; 0x04
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	8e 53       	subi	r24, 0x3E	; 62
     276:	9c 4f       	sbci	r25, 0xFC	; 252
     278:	fc 01       	movw	r30, r24
     27a:	20 81       	ld	r18, Z
     27c:	31 81       	ldd	r19, Z+1	; 0x01
     27e:	8b 81       	ldd	r24, Y+3	; 0x03
     280:	9c 81       	ldd	r25, Y+4	; 0x04
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	8a 53       	subi	r24, 0x3A	; 58
     288:	9c 4f       	sbci	r25, 0xFC	; 252
     28a:	fc 01       	movw	r30, r24
     28c:	80 81       	ld	r24, Z
     28e:	91 81       	ldd	r25, Z+1	; 0x01
     290:	28 17       	cp	r18, r24
     292:	39 07       	cpc	r19, r25
     294:	21 f4       	brne	.+8      	; 0x29e <delay_isdone+0x46>
        result = 1;
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	9a 83       	std	Y+2, r25	; 0x02
     29c:	89 83       	std	Y+1, r24	; 0x01
    }

    // Return the result
    return result;
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <__vector_14>:

//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	2f 93       	push	r18
     2be:	3f 93       	push	r19
     2c0:	8f 93       	push	r24
     2c2:	9f 93       	push	r25
     2c4:	ef 93       	push	r30
     2c6:	ff 93       	push	r31
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <__vector_14+0x1e>
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     2d2:	1a 82       	std	Y+2, r1	; 0x02
     2d4:	19 82       	std	Y+1, r1	; 0x01
     2d6:	2f c0       	rjmp	.+94     	; 0x336 <__vector_14+0x86>
        if (delay_count[i] < limit[i]) {
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	9a 81       	ldd	r25, Y+2	; 0x02
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	8e 53       	subi	r24, 0x3E	; 62
     2e2:	9c 4f       	sbci	r25, 0xFC	; 252
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 81       	ld	r18, Z
     2e8:	31 81       	ldd	r19, Z+1	; 0x01
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	8a 53       	subi	r24, 0x3A	; 58
     2f4:	9c 4f       	sbci	r25, 0xFC	; 252
     2f6:	fc 01       	movw	r30, r24
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	28 17       	cp	r18, r24
     2fe:	39 07       	cpc	r19, r25
     300:	a8 f4       	brcc	.+42     	; 0x32c <__vector_14+0x7c>
            delay_count[i]++;
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	9a 81       	ldd	r25, Y+2	; 0x02
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	8e 53       	subi	r24, 0x3E	; 62
     30c:	9c 4f       	sbci	r25, 0xFC	; 252
     30e:	fc 01       	movw	r30, r24
     310:	80 81       	ld	r24, Z
     312:	91 81       	ldd	r25, Z+1	; 0x01
     314:	9c 01       	movw	r18, r24
     316:	2f 5f       	subi	r18, 0xFF	; 255
     318:	3f 4f       	sbci	r19, 0xFF	; 255
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	9a 81       	ldd	r25, Y+2	; 0x02
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	8e 53       	subi	r24, 0x3E	; 62
     324:	9c 4f       	sbci	r25, 0xFC	; 252
     326:	fc 01       	movw	r30, r24
     328:	31 83       	std	Z+1, r19	; 0x01
     32a:	20 83       	st	Z, r18
//map to ivt

void __vector_14(void) __attribute__ ((signal, used, externally_visible));

void __vector_14(void) {
    for (unsigned int i = 0; i < sizeof(delay_count) / sizeof(delay_count[0]); i++) {
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	9a 83       	std	Y+2, r25	; 0x02
     334:	89 83       	std	Y+1, r24	; 0x01
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	02 97       	sbiw	r24, 0x02	; 2
     33c:	68 f2       	brcs	.-102    	; 0x2d8 <__vector_14+0x28>
        if (delay_count[i] < limit[i]) {
            delay_count[i]++;
        }
    }
}
     33e:	00 00       	nop
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	ff 91       	pop	r31
     34a:	ef 91       	pop	r30
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	3f 91       	pop	r19
     352:	2f 91       	pop	r18
     354:	0f 90       	pop	r0
     356:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     35a:	0f 90       	pop	r0
     35c:	1f 90       	pop	r1
     35e:	18 95       	reti

00000360 <led_init>:

const char *Blink_msg;
unsigned int Blink_pos;
enum Blink_state { phase1, phase2 } blink_state;

void led_init() {
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
    DDRB |= LED_PIN; // Set LED pin as output
     368:	84 e2       	ldi	r24, 0x24	; 36
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	24 e2       	ldi	r18, 0x24	; 36
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	f9 01       	movw	r30, r18
     372:	20 81       	ld	r18, Z
     374:	22 60       	ori	r18, 0x02	; 2
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
    PORTB &= ~LED_PIN; // Turn off the LED
     37a:	85 e2       	ldi	r24, 0x25	; 37
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	25 e2       	ldi	r18, 0x25	; 37
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	f9 01       	movw	r30, r18
     384:	20 81       	ld	r18, Z
     386:	2d 7f       	andi	r18, 0xFD	; 253
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
}
     38c:	00 00       	nop
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <led_on>:

void led_on() {
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
    PORTB |= LED_PIN;
     39c:	85 e2       	ldi	r24, 0x25	; 37
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	25 e2       	ldi	r18, 0x25	; 37
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	f9 01       	movw	r30, r18
     3a6:	20 81       	ld	r18, Z
     3a8:	22 60       	ori	r18, 0x02	; 2
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
}
     3ae:	00 00       	nop
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <led_off>:

void led_off() {
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~LED_PIN;
     3be:	85 e2       	ldi	r24, 0x25	; 37
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	25 e2       	ldi	r18, 0x25	; 37
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	20 81       	ld	r18, Z
     3ca:	2d 7f       	andi	r18, 0xFD	; 253
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18
}
     3d0:	00 00       	nop
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <led_is_on>:

int led_is_on() {
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
    return (PORTB & LED_PIN) ? 1 : 0;
     3e0:	85 e2       	ldi	r24, 0x25	; 37
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	fc 01       	movw	r30, r24
     3e6:	80 81       	ld	r24, Z
     3e8:	88 2f       	mov	r24, r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	82 70       	andi	r24, 0x02	; 2
     3ee:	99 27       	eor	r25, r25
     3f0:	21 e0       	ldi	r18, 0x01	; 1
     3f2:	89 2b       	or	r24, r25
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <led_is_on+0x20>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	82 2f       	mov	r24, r18
     3fa:	90 e0       	ldi	r25, 0x00	; 0
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <led_set_blink>:

void led_set_blink(char *msg) {
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	00 d0       	rcall	.+0      	; 0x408 <led_set_blink+0x6>
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	89 83       	std	Y+1, r24	; 0x01
    Blink_msg = msg;
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <Blink_msg+0x1>
     418:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <Blink_msg>
    Blink_pos = 0;
     41c:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <Blink_pos+0x1>
     420:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <Blink_pos>
    blink_state = phase1;
     424:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <blink_state+0x1>
     428:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <blink_state>
    delay_set(0, 0);
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_set>
    led_off();
     438:	0e 94 db 01 	call	0x3b6	; 0x3b6 <led_off>
}
     43c:	00 00       	nop
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <led_update>:

void led_update() {
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
    switch (blink_state) {
     450:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <blink_state>
     454:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <blink_state+0x1>
     458:	00 97       	sbiw	r24, 0x00	; 0
     45a:	21 f0       	breq	.+8      	; 0x464 <led_update+0x1c>
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	09 f4       	brne	.+2      	; 0x462 <led_update+0x1a>
     460:	51 c0       	rjmp	.+162    	; 0x504 <led_update+0xbc>
                blink_state = phase1;
            }
            break;

        default:
            break;
     462:	81 c0       	rjmp	.+258    	; 0x566 <led_update+0x11e>
}

void led_update() {
    switch (blink_state) {
        case phase1:
            if (delay_isdone(0)) {
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 2c 01 	call	0x258	; 0x258 <delay_isdone>
     46c:	89 2b       	or	r24, r25
     46e:	09 f4       	brne	.+2      	; 0x472 <led_update+0x2a>
     470:	77 c0       	rjmp	.+238    	; 0x560 <led_update+0x118>
                switch (Blink_msg[Blink_pos]) {
     472:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <Blink_msg>
     476:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <Blink_msg+0x1>
     47a:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Blink_pos>
     47e:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Blink_pos+0x1>
     482:	82 0f       	add	r24, r18
     484:	93 1f       	adc	r25, r19
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	08 2e       	mov	r0, r24
     48c:	00 0c       	add	r0, r0
     48e:	99 0b       	sbc	r25, r25
     490:	8d 32       	cpi	r24, 0x2D	; 45
     492:	91 05       	cpc	r25, r1
     494:	31 f0       	breq	.+12     	; 0x4a2 <led_update+0x5a>
     496:	8e 32       	cpi	r24, 0x2E	; 46
     498:	91 05       	cpc	r25, r1
     49a:	91 f0       	breq	.+36     	; 0x4c0 <led_update+0x78>
     49c:	80 97       	sbiw	r24, 0x20	; 32
     49e:	f9 f0       	breq	.+62     	; 0x4de <led_update+0x96>
     4a0:	27 c0       	rjmp	.+78     	; 0x4f0 <led_update+0xa8>
                    case '-':
                        led_on();
     4a2:	0e 94 ca 01 	call	0x394	; 0x394 <led_on>
                        delay_set(0, 750);
     4a6:	6e ee       	ldi	r22, 0xEE	; 238
     4a8:	72 e0       	ldi	r23, 0x02	; 2
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_set>
                        //delay_set(0,7);
                        blink_state = phase2;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <blink_state+0x1>
     4ba:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <blink_state>
                        break;
     4be:	21 c0       	rjmp	.+66     	; 0x502 <led_update+0xba>
                    case '.':
                        led_on();
     4c0:	0e 94 ca 01 	call	0x394	; 0x394 <led_on>
                        delay_set(0, 250);
     4c4:	6a ef       	ldi	r22, 0xFA	; 250
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_set>
                        //delay_set(0,2);
                        blink_state = phase2;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <blink_state+0x1>
     4d8:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <blink_state>
                        break;
     4dc:	12 c0       	rjmp	.+36     	; 0x502 <led_update+0xba>
                    case ' ':
                        led_off();
     4de:	0e 94 db 01 	call	0x3b6	; 0x3b6 <led_off>
                        delay_set(0, 1000);
     4e2:	68 ee       	ldi	r22, 0xE8	; 232
     4e4:	73 e0       	ldi	r23, 0x03	; 3
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_set>
                        //blink_state = phase2;
                        break;
     4ee:	09 c0       	rjmp	.+18     	; 0x502 <led_update+0xba>
                    default:
                        led_off();
     4f0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <led_off>
                        delay_set(0, 0);
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_set>
                        break;
     500:	00 00       	nop
                }
            }
            break;
     502:	2e c0       	rjmp	.+92     	; 0x560 <led_update+0x118>

        case phase2:
            if (delay_isdone(0)) {
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 2c 01 	call	0x258	; 0x258 <delay_isdone>
     50c:	89 2b       	or	r24, r25
     50e:	51 f1       	breq	.+84     	; 0x564 <led_update+0x11c>
                led_off();
     510:	0e 94 db 01 	call	0x3b6	; 0x3b6 <led_off>
                delay_set(0, 100);
     514:	64 e6       	ldi	r22, 0x64	; 100
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_set>
                //delay_set(0, 1);
                Blink_pos++;
     520:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Blink_pos>
     524:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Blink_pos+0x1>
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <Blink_pos+0x1>
     52e:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <Blink_pos>
                if (Blink_pos >= strlen(Blink_msg)) {
     532:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <Blink_msg>
     536:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <Blink_msg+0x1>
     53a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <strlen>
     53e:	9c 01       	movw	r18, r24
     540:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Blink_pos>
     544:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Blink_pos+0x1>
     548:	82 17       	cp	r24, r18
     54a:	93 07       	cpc	r25, r19
     54c:	20 f0       	brcs	.+8      	; 0x556 <led_update+0x10e>
                    Blink_pos = 0;
     54e:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <Blink_pos+0x1>
     552:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <Blink_pos>
                }
                blink_state = phase1;
     556:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <blink_state+0x1>
     55a:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <blink_state>
            }
            break;
     55e:	02 c0       	rjmp	.+4      	; 0x564 <led_update+0x11c>
                        led_off();
                        delay_set(0, 0);
                        break;
                }
            }
            break;
     560:	00 00       	nop
     562:	01 c0       	rjmp	.+2      	; 0x566 <led_update+0x11e>
                if (Blink_pos >= strlen(Blink_msg)) {
                    Blink_pos = 0;
                }
                blink_state = phase1;
            }
            break;
     564:	00 00       	nop

        default:
            break;
    }
}
     566:	00 00       	nop
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <main>:
* of tasks in order to provide a temperature sensor endpoint to an
* industrial IOT system. Ethernet sockets are not yet supported -
* all transactions are carried out over the uart debug port.
*/
int main(void)
{
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	1f 92       	push	r1
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
    /* initialize the hardware and device state */
    config_init();
     57c:	0e 94 a9 06 	call	0xd52	; 0xd52 <config_init>
    vpd_init();
     580:	0e 94 bf 13 	call	0x277e	; 0x277e <vpd_init>
    rtc_init();
     584:	0e 94 a4 09 	call	0x1348	; 0x1348 <rtc_init>
    log_init();
     588:	0e 94 ac 07 	call	0xf58	; 0xf58 <log_init>
    alarm_init();
     58c:	0e 94 65 06 	call	0xcca	; 0xcca <alarm_init>
    uart_init();
     590:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <uart_init>
    led_init();
     594:	0e 94 b0 01 	call	0x360	; 0x360 <led_init>
    temp_init();
     598:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <temp_init>
    wdt_init();
     59c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <wdt_init>
    tempfsm_init();
     5a0:	0e 94 47 03 	call	0x68e	; 0x68e <tempfsm_init>

    unsigned char connected = 0;  /* 1 if socket is connected, otherwise, 0 */
     5a4:	19 82       	std	Y+1, r1	; 0x01

    /* print the banner to the debug port */
    uart_writestr("SER486 Project 3 - Integration\r\n");
     5a6:	80 e3       	ldi	r24, 0x30	; 48
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    uart_writestr( STRINGIZE_VALUE(YOURNAME) );
     5ae:	81 e5       	ldi	r24, 0x51	; 81
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    uart_writestr("\r\n");
     5b6:	83 e6       	ldi	r24, 0x63	; 99
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>

    /* log the startup event */
    log_add_record(EVENT_STARTUP);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <log_add_record>

    /* start the first temperature reading and wait 5 seconds before reading again
    * this long delay ensures that the temperature spike during startup does not
    * trigger any false alarms.
    */
    temp_start();
     5c4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <temp_start>
    delay_set(1,5000);
     5c8:	68 e8       	ldi	r22, 0x88	; 136
     5ca:	73 e1       	ldi	r23, 0x13	; 19
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_set>

    /* control loop */
    while(1) {
       /* reset  the watchdog timer every loop */
       wdt_reset();
     5d4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <wdt_reset>

       /* update the led state based on the blink code */
       led_update();
     5d8:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
       /* if the temperature sensor delay is done, update the current temperature
       * from the temperature sensor, update the temperature sensor finite state
       * machine (which provides hysteresis) and send any temperature sensor
       * alarms (from FSM update).
       */
       if (delay_isdone(1)) {
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 2c 01 	call	0x258	; 0x258 <delay_isdone>
     5e4:	89 2b       	or	r24, r25
     5e6:	31 f1       	breq	.+76     	; 0x634 <main+0xc6>
          /* read the temperature sensor */
          current_temperature = temp_get();
     5e8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <temp_get>
     5ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     5f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

          tempfsm_update(current_temperature,config.hi_alarm,config.hi_warn,config.lo_alarm,config.lo_warn);
     5f4:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <config+0xa>
     5f8:	f0 91 ad 04 	lds	r31, 0x04AD	; 0x8004ad <config+0xb>
     5fc:	20 91 aa 04 	lds	r18, 0x04AA	; 0x8004aa <config+0x8>
     600:	30 91 ab 04 	lds	r19, 0x04AB	; 0x8004ab <config+0x9>
     604:	40 91 a8 04 	lds	r20, 0x04A8	; 0x8004a8 <config+0x6>
     608:	50 91 a9 04 	lds	r21, 0x04A9	; 0x8004a9 <config+0x7>
     60c:	60 91 a6 04 	lds	r22, 0x04A6	; 0x8004a6 <config+0x4>
     610:	70 91 a7 04 	lds	r23, 0x04A7	; 0x8004a7 <config+0x5>
     614:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     618:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     61c:	8f 01       	movw	r16, r30
     61e:	0e 94 5f 03 	call	0x6be	; 0x6be <tempfsm_update>

          /* restart the temperature sensor delay to trigger in 1 second */
          temp_start();
     622:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <temp_start>
          delay_set(1,1000);
     626:	68 ee       	ldi	r22, 0xE8	; 232
     628:	73 e0       	ldi	r23, 0x03	; 3
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_set>
     632:	d0 cf       	rjmp	.-96     	; 0x5d4 <main+0x66>
       } else if (connected == 0) {
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	88 23       	and	r24, r24
     638:	59 f4       	brne	.+22     	; 0x650 <main+0xe2>
          /* if the connection state is 0 (unconnected), wait for the socket to connect */
          if (uartsocket_is_connected()) {
     63a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uartsocket_is_connected>
     63e:	88 23       	and	r24, r24
     640:	49 f2       	breq	.-110    	; 0x5d4 <main+0x66>
             /* socket is now connected - print a message to the uart debug port and update our connection status */
             uart_writestr("Connection Established\r\n");
     642:	86 e6       	ldi	r24, 0x66	; 102
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
             connected = 1;
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	89 83       	std	Y+1, r24	; 0x01
     64e:	c2 cf       	rjmp	.-124    	; 0x5d4 <main+0x66>
          }
       } else if (uartsocket_is_packet_available()) {
     650:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <uartsocket_is_packet_available>
     654:	88 23       	and	r24, r24
     656:	69 f0       	breq	.+26     	; 0x672 <main+0x104>
           /* here if we are connected and a packet is available for processing.
           * Process the packet, update the device state and send the appropriate response to the client
           */
           parse_and_send_response();
     658:	0e 94 75 0f 	call	0x1eea	; 0x1eea <parse_and_send_response>
           if (!uartsocket_is_connected()) {
     65c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uartsocket_is_connected>
     660:	88 23       	and	r24, r24
     662:	09 f0       	breq	.+2      	; 0x666 <main+0xf8>
     664:	b7 cf       	rjmp	.-146    	; 0x5d4 <main+0x66>
              /* if connection is lost, print a debug message and update the connection state */
              uartsocket_writestr("Connection Lost\r\n");
     666:	8f e7       	ldi	r24, 0x7F	; 127
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <uartsocket_writestr>
              connected = 0;
     66e:	19 82       	std	Y+1, r1	; 0x01
     670:	b1 cf       	rjmp	.-158    	; 0x5d4 <main+0x66>
           }
       } else {
          /* update any pending write backs */
          if (!eeprom_isbusy()) log_update();
     672:	0e 94 82 07 	call	0xf04	; 0xf04 <eeprom_isbusy>
     676:	89 2b       	or	r24, r25
     678:	11 f4       	brne	.+4      	; 0x67e <main+0x110>
     67a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <log_update>
          if (!eeprom_isbusy()) config_update();
     67e:	0e 94 82 07 	call	0xf04	; 0xf04 <eeprom_isbusy>
     682:	89 2b       	or	r24, r25
     684:	09 f0       	breq	.+2      	; 0x688 <main+0x11a>
     686:	a6 cf       	rjmp	.-180    	; 0x5d4 <main+0x66>
     688:	0e 94 c4 06 	call	0xd88	; 0xd88 <config_update>
       }
    }
     68c:	a3 cf       	rjmp	.-186    	; 0x5d4 <main+0x66>

0000068e <tempfsm_init>:
#include "log.h"

enum Temp_State { NORM1, NORM2, NORM3, WARN_HI1, WARN_HI2, CRITICAL_HI, WARN_LO1, WARN_LO2, CRITICAL_LO} temp_state;

void tempfsm_init()
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
    temp_state = NORM1;
     696:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <temp_state+0x1>
     69a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <temp_state>
}
     69e:	00 00       	nop
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <tempfsm_reset>:

void tempfsm_reset()
{
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
    temp_state = NORM1;
     6ae:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <temp_state+0x1>
     6b2:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <temp_state>
}
     6b6:	00 00       	nop
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <tempfsm_update>:

void tempfsm_update(int current, int hicrit, int hiwarn, int locrit, int lowarn)
{
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	2a 97       	sbiw	r28, 0x0a	; 10
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	9a 83       	std	Y+2, r25	; 0x02
     6d8:	89 83       	std	Y+1, r24	; 0x01
     6da:	7c 83       	std	Y+4, r23	; 0x04
     6dc:	6b 83       	std	Y+3, r22	; 0x03
     6de:	5e 83       	std	Y+6, r21	; 0x06
     6e0:	4d 83       	std	Y+5, r20	; 0x05
     6e2:	38 87       	std	Y+8, r19	; 0x08
     6e4:	2f 83       	std	Y+7, r18	; 0x07
     6e6:	1a 87       	std	Y+10, r17	; 0x0a
     6e8:	09 87       	std	Y+9, r16	; 0x09
    switch(temp_state)
     6ea:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <temp_state>
     6ee:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <temp_state+0x1>
     6f2:	cc 01       	movw	r24, r24
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	28 e0       	ldi	r18, 0x08	; 8
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	84 1b       	sub	r24, r20
     702:	95 0b       	sbc	r25, r21
     704:	28 17       	cp	r18, r24
     706:	39 07       	cpc	r19, r25
     708:	08 f4       	brcc	.+2      	; 0x70c <tempfsm_update+0x4e>
     70a:	77 c1       	rjmp	.+750    	; 0x9fa <__stack+0xfb>
     70c:	8c 5c       	subi	r24, 0xCC	; 204
     70e:	9f 4f       	sbci	r25, 0xFF	; 255
     710:	fc 01       	movw	r30, r24
     712:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__tablejump2__>
    {
    case NORM1:
        if(current >= hiwarn)
     716:	29 81       	ldd	r18, Y+1	; 0x01
     718:	3a 81       	ldd	r19, Y+2	; 0x02
     71a:	8d 81       	ldd	r24, Y+5	; 0x05
     71c:	9e 81       	ldd	r25, Y+6	; 0x06
     71e:	28 17       	cp	r18, r24
     720:	39 07       	cpc	r19, r25
     722:	84 f0       	brlt	.+32     	; 0x744 <tempfsm_update+0x86>
        {
            alarm_send(EVENT_HI_WARN);
     724:	86 e0       	ldi	r24, 0x06	; 6
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 66 06 	call	0xccc	; 0xccc <alarm_send>
            led_set_blink("-");     //Next state is a warning state
     72c:	81 e9       	ldi	r24, 0x91	; 145
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     734:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = WARN_HI1;
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     740:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        if (current<= lowarn)
     744:	29 81       	ldd	r18, Y+1	; 0x01
     746:	3a 81       	ldd	r19, Y+2	; 0x02
     748:	89 85       	ldd	r24, Y+9	; 0x09
     74a:	9a 85       	ldd	r25, Y+10	; 0x0a
     74c:	82 17       	cp	r24, r18
     74e:	93 07       	cpc	r25, r19
     750:	0c f4       	brge	.+2      	; 0x754 <tempfsm_update+0x96>
     752:	42 c1       	rjmp	.+644    	; 0x9d8 <__stack+0xd9>
        {
            alarm_send(EVENT_LO_WARN);
     754:	88 e0       	ldi	r24, 0x08	; 8
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 66 06 	call	0xccc	; 0xccc <alarm_send>
            led_set_blink("-");     //Next state is a warning state
     75c:	81 e9       	ldi	r24, 0x91	; 145
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     764:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = WARN_LO1;
     768:	86 e0       	ldi	r24, 0x06	; 6
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     770:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        break;
     774:	31 c1       	rjmp	.+610    	; 0x9d8 <__stack+0xd9>

    case WARN_HI1:
        if(current > hicrit)
     776:	29 81       	ldd	r18, Y+1	; 0x01
     778:	3a 81       	ldd	r19, Y+2	; 0x02
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	9c 81       	ldd	r25, Y+4	; 0x04
     77e:	82 17       	cp	r24, r18
     780:	93 07       	cpc	r25, r19
     782:	84 f4       	brge	.+32     	; 0x7a4 <tempfsm_update+0xe6>
        {
            alarm_send(EVENT_HI_ALARM);
     784:	85 e0       	ldi	r24, 0x05	; 5
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 66 06 	call	0xccc	; 0xccc <alarm_send>
            led_set_blink(".");     //Next state is a critical state
     78c:	83 e9       	ldi	r24, 0x93	; 147
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     794:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = CRITICAL_HI;
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     7a0:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        if(current < hiwarn)
     7a4:	29 81       	ldd	r18, Y+1	; 0x01
     7a6:	3a 81       	ldd	r19, Y+2	; 0x02
     7a8:	8d 81       	ldd	r24, Y+5	; 0x05
     7aa:	9e 81       	ldd	r25, Y+6	; 0x06
     7ac:	28 17       	cp	r18, r24
     7ae:	39 07       	cpc	r19, r25
     7b0:	0c f0       	brlt	.+2      	; 0x7b4 <tempfsm_update+0xf6>
     7b2:	14 c1       	rjmp	.+552    	; 0x9dc <__stack+0xdd>
        {
            led_set_blink(" ");     //Next state is a normal state
     7b4:	85 e9       	ldi	r24, 0x95	; 149
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     7bc:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = NORM3;
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     7c8:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        break;
     7cc:	07 c1       	rjmp	.+526    	; 0x9dc <__stack+0xdd>

    case WARN_LO1:
        if(current<=locrit)
     7ce:	29 81       	ldd	r18, Y+1	; 0x01
     7d0:	3a 81       	ldd	r19, Y+2	; 0x02
     7d2:	8f 81       	ldd	r24, Y+7	; 0x07
     7d4:	98 85       	ldd	r25, Y+8	; 0x08
     7d6:	82 17       	cp	r24, r18
     7d8:	93 07       	cpc	r25, r19
     7da:	84 f0       	brlt	.+32     	; 0x7fc <tempfsm_update+0x13e>
        {
            alarm_send(EVENT_LO_ALARM);
     7dc:	87 e0       	ldi	r24, 0x07	; 7
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 66 06 	call	0xccc	; 0xccc <alarm_send>
            led_set_blink(".");     //Next state is a critical state
     7e4:	83 e9       	ldi	r24, 0x93	; 147
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     7ec:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = CRITICAL_LO;
     7f0:	88 e0       	ldi	r24, 0x08	; 8
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     7f8:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        if(current > lowarn)
     7fc:	29 81       	ldd	r18, Y+1	; 0x01
     7fe:	3a 81       	ldd	r19, Y+2	; 0x02
     800:	89 85       	ldd	r24, Y+9	; 0x09
     802:	9a 85       	ldd	r25, Y+10	; 0x0a
     804:	82 17       	cp	r24, r18
     806:	93 07       	cpc	r25, r19
     808:	0c f0       	brlt	.+2      	; 0x80c <tempfsm_update+0x14e>
     80a:	ea c0       	rjmp	.+468    	; 0x9e0 <__stack+0xe1>
        {
            led_set_blink(" ");     //Next state is a normal state
     80c:	85 e9       	ldi	r24, 0x95	; 149
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     814:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = NORM2;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     820:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        break;
     824:	dd c0       	rjmp	.+442    	; 0x9e0 <__stack+0xe1>

    case NORM3:
        if(current>=hiwarn)
     826:	29 81       	ldd	r18, Y+1	; 0x01
     828:	3a 81       	ldd	r19, Y+2	; 0x02
     82a:	8d 81       	ldd	r24, Y+5	; 0x05
     82c:	9e 81       	ldd	r25, Y+6	; 0x06
     82e:	28 17       	cp	r18, r24
     830:	39 07       	cpc	r19, r25
     832:	84 f0       	brlt	.+32     	; 0x854 <tempfsm_update+0x196>
        {
            alarm_send(EVENT_HI_WARN);
     834:	86 e0       	ldi	r24, 0x06	; 6
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 66 06 	call	0xccc	; 0xccc <alarm_send>
            led_set_blink("-");     //Next state is a warning state
     83c:	81 e9       	ldi	r24, 0x91	; 145
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     844:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = WARN_HI1;
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     850:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        if (current<=lowarn)
     854:	29 81       	ldd	r18, Y+1	; 0x01
     856:	3a 81       	ldd	r19, Y+2	; 0x02
     858:	89 85       	ldd	r24, Y+9	; 0x09
     85a:	9a 85       	ldd	r25, Y+10	; 0x0a
     85c:	82 17       	cp	r24, r18
     85e:	93 07       	cpc	r25, r19
     860:	0c f4       	brge	.+2      	; 0x864 <tempfsm_update+0x1a6>
     862:	c0 c0       	rjmp	.+384    	; 0x9e4 <__stack+0xe5>
        {
            alarm_send(EVENT_LO_WARN);
     864:	88 e0       	ldi	r24, 0x08	; 8
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 66 06 	call	0xccc	; 0xccc <alarm_send>
            led_set_blink("-");     //Next state is a warning state
     86c:	81 e9       	ldi	r24, 0x91	; 145
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     874:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = WARN_LO1;
     878:	86 e0       	ldi	r24, 0x06	; 6
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     880:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        break;
     884:	af c0       	rjmp	.+350    	; 0x9e4 <__stack+0xe5>

    case NORM2:
        if(current>=hiwarn)
     886:	29 81       	ldd	r18, Y+1	; 0x01
     888:	3a 81       	ldd	r19, Y+2	; 0x02
     88a:	8d 81       	ldd	r24, Y+5	; 0x05
     88c:	9e 81       	ldd	r25, Y+6	; 0x06
     88e:	28 17       	cp	r18, r24
     890:	39 07       	cpc	r19, r25
     892:	84 f0       	brlt	.+32     	; 0x8b4 <tempfsm_update+0x1f6>
        {
            alarm_send(EVENT_HI_WARN);
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 66 06 	call	0xccc	; 0xccc <alarm_send>
            led_set_blink("-");     //Next state is a warning state
     89c:	81 e9       	ldi	r24, 0x91	; 145
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     8a4:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = WARN_HI1;
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     8b0:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        if (current<=lowarn)
     8b4:	29 81       	ldd	r18, Y+1	; 0x01
     8b6:	3a 81       	ldd	r19, Y+2	; 0x02
     8b8:	89 85       	ldd	r24, Y+9	; 0x09
     8ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     8bc:	82 17       	cp	r24, r18
     8be:	93 07       	cpc	r25, r19
     8c0:	0c f4       	brge	.+2      	; 0x8c4 <tempfsm_update+0x206>
     8c2:	92 c0       	rjmp	.+292    	; 0x9e8 <__stack+0xe9>
        {
            alarm_send(EVENT_LO_WARN);
     8c4:	88 e0       	ldi	r24, 0x08	; 8
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 66 06 	call	0xccc	; 0xccc <alarm_send>
            led_set_blink("-");     //Next state is a warning state
     8cc:	81 e9       	ldi	r24, 0x91	; 145
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     8d4:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = WARN_LO1;
     8d8:	86 e0       	ldi	r24, 0x06	; 6
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     8e0:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        break;
     8e4:	81 c0       	rjmp	.+258    	; 0x9e8 <__stack+0xe9>

    case CRITICAL_LO:
        if(current>locrit)
     8e6:	29 81       	ldd	r18, Y+1	; 0x01
     8e8:	3a 81       	ldd	r19, Y+2	; 0x02
     8ea:	8f 81       	ldd	r24, Y+7	; 0x07
     8ec:	98 85       	ldd	r25, Y+8	; 0x08
     8ee:	82 17       	cp	r24, r18
     8f0:	93 07       	cpc	r25, r19
     8f2:	0c f0       	brlt	.+2      	; 0x8f6 <tempfsm_update+0x238>
     8f4:	7b c0       	rjmp	.+246    	; 0x9ec <__stack+0xed>
        {
            led_set_blink("-");     //Next state is a warning state
     8f6:	81 e9       	ldi	r24, 0x91	; 145
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     8fe:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = WARN_LO2;
     902:	87 e0       	ldi	r24, 0x07	; 7
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     90a:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        break;
     90e:	6e c0       	rjmp	.+220    	; 0x9ec <__stack+0xed>

    case CRITICAL_HI:
        if(current<hicrit)
     910:	29 81       	ldd	r18, Y+1	; 0x01
     912:	3a 81       	ldd	r19, Y+2	; 0x02
     914:	8b 81       	ldd	r24, Y+3	; 0x03
     916:	9c 81       	ldd	r25, Y+4	; 0x04
     918:	28 17       	cp	r18, r24
     91a:	39 07       	cpc	r19, r25
     91c:	0c f0       	brlt	.+2      	; 0x920 <__stack+0x21>
     91e:	68 c0       	rjmp	.+208    	; 0x9f0 <__stack+0xf1>
        {
            led_set_blink("-");     //Next state is a warning state
     920:	81 e9       	ldi	r24, 0x91	; 145
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     928:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = WARN_HI2;
     92c:	84 e0       	ldi	r24, 0x04	; 4
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     934:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        break;
     938:	5b c0       	rjmp	.+182    	; 0x9f0 <__stack+0xf1>

    case WARN_LO2:
        if(current < locrit)
     93a:	29 81       	ldd	r18, Y+1	; 0x01
     93c:	3a 81       	ldd	r19, Y+2	; 0x02
     93e:	8f 81       	ldd	r24, Y+7	; 0x07
     940:	98 85       	ldd	r25, Y+8	; 0x08
     942:	28 17       	cp	r18, r24
     944:	39 07       	cpc	r19, r25
     946:	64 f4       	brge	.+24     	; 0x960 <__stack+0x61>
        {
            led_set_blink(".");     //Next state is a critical state
     948:	83 e9       	ldi	r24, 0x93	; 147
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     950:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = CRITICAL_LO;
     954:	88 e0       	ldi	r24, 0x08	; 8
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     95c:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        if(current > lowarn)
     960:	29 81       	ldd	r18, Y+1	; 0x01
     962:	3a 81       	ldd	r19, Y+2	; 0x02
     964:	89 85       	ldd	r24, Y+9	; 0x09
     966:	9a 85       	ldd	r25, Y+10	; 0x0a
     968:	82 17       	cp	r24, r18
     96a:	93 07       	cpc	r25, r19
     96c:	0c f0       	brlt	.+2      	; 0x970 <__stack+0x71>
     96e:	42 c0       	rjmp	.+132    	; 0x9f4 <__stack+0xf5>
        {
            led_set_blink(" ");     //Next state is a normal state
     970:	85 e9       	ldi	r24, 0x95	; 149
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     978:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = NORM2;
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     984:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        break;
     988:	35 c0       	rjmp	.+106    	; 0x9f4 <__stack+0xf5>

    case WARN_HI2:
        if(current < hiwarn)
     98a:	29 81       	ldd	r18, Y+1	; 0x01
     98c:	3a 81       	ldd	r19, Y+2	; 0x02
     98e:	8d 81       	ldd	r24, Y+5	; 0x05
     990:	9e 81       	ldd	r25, Y+6	; 0x06
     992:	28 17       	cp	r18, r24
     994:	39 07       	cpc	r19, r25
     996:	64 f4       	brge	.+24     	; 0x9b0 <__stack+0xb1>
        {
            led_set_blink(" ");     //Next state is a normal state
     998:	85 e9       	ldi	r24, 0x95	; 149
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     9a0:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = NORM3;
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     9ac:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        if(current >= hicrit)
     9b0:	29 81       	ldd	r18, Y+1	; 0x01
     9b2:	3a 81       	ldd	r19, Y+2	; 0x02
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	9c 81       	ldd	r25, Y+4	; 0x04
     9b8:	28 17       	cp	r18, r24
     9ba:	39 07       	cpc	r19, r25
     9bc:	ec f0       	brlt	.+58     	; 0x9f8 <__stack+0xf9>
        {
            led_set_blink(".");     //Next state is a critical state
     9be:	83 e9       	ldi	r24, 0x93	; 147
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 01 02 	call	0x402	; 0x402 <led_set_blink>
            led_update();
     9c6:	0e 94 24 02 	call	0x448	; 0x448 <led_update>
            temp_state = CRITICAL_HI;
     9ca:	85 e0       	ldi	r24, 0x05	; 5
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <temp_state+0x1>
     9d2:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <temp_state>
        }
        break;
     9d6:	10 c0       	rjmp	.+32     	; 0x9f8 <__stack+0xf9>
            alarm_send(EVENT_LO_WARN);
            led_set_blink("-");     //Next state is a warning state
            led_update();
            temp_state = WARN_LO1;
        }
        break;
     9d8:	00 00       	nop
     9da:	0f c0       	rjmp	.+30     	; 0x9fa <__stack+0xfb>
        {
            led_set_blink(" ");     //Next state is a normal state
            led_update();
            temp_state = NORM3;
        }
        break;
     9dc:	00 00       	nop
     9de:	0d c0       	rjmp	.+26     	; 0x9fa <__stack+0xfb>
        {
            led_set_blink(" ");     //Next state is a normal state
            led_update();
            temp_state = NORM2;
        }
        break;
     9e0:	00 00       	nop
     9e2:	0b c0       	rjmp	.+22     	; 0x9fa <__stack+0xfb>
            alarm_send(EVENT_LO_WARN);
            led_set_blink("-");     //Next state is a warning state
            led_update();
            temp_state = WARN_LO1;
        }
        break;
     9e4:	00 00       	nop
     9e6:	09 c0       	rjmp	.+18     	; 0x9fa <__stack+0xfb>
            alarm_send(EVENT_LO_WARN);
            led_set_blink("-");     //Next state is a warning state
            led_update();
            temp_state = WARN_LO1;
        }
        break;
     9e8:	00 00       	nop
     9ea:	07 c0       	rjmp	.+14     	; 0x9fa <__stack+0xfb>
        {
            led_set_blink("-");     //Next state is a warning state
            led_update();
            temp_state = WARN_LO2;
        }
        break;
     9ec:	00 00       	nop
     9ee:	05 c0       	rjmp	.+10     	; 0x9fa <__stack+0xfb>
        {
            led_set_blink("-");     //Next state is a warning state
            led_update();
            temp_state = WARN_HI2;
        }
        break;
     9f0:	00 00       	nop
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <__stack+0xfb>
        {
            led_set_blink(" ");     //Next state is a normal state
            led_update();
            temp_state = NORM2;
        }
        break;
     9f4:	00 00       	nop
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__stack+0xfb>
        {
            led_set_blink(".");     //Next state is a critical state
            led_update();
            temp_state = CRITICAL_HI;
        }
        break;
     9f8:	00 00       	nop

    }

}
     9fa:	00 00       	nop
     9fc:	2a 96       	adiw	r28, 0x0a	; 10
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <calc_checksum>:
#define SREG    *((volatile char*) 0x5F)

#define C_SREG 0

unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	27 97       	sbiw	r28, 0x07	; 7
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	9d 83       	std	Y+5, r25	; 0x05
     a28:	8c 83       	std	Y+4, r24	; 0x04
     a2a:	7f 83       	std	Y+7, r23	; 0x07
     a2c:	6e 83       	std	Y+6, r22	; 0x06
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     a2e:	1b 82       	std	Y+3, r1	; 0x03
     a30:	1a 82       	std	Y+2, r1	; 0x02
     a32:	1e c0       	rjmp	.+60     	; 0xa70 <calc_checksum+0x5e>
    {
        checksum_result += data[i];
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	9b 81       	ldd	r25, Y+3	; 0x03
     a38:	2c 81       	ldd	r18, Y+4	; 0x04
     a3a:	3d 81       	ldd	r19, Y+5	; 0x05
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	fc 01       	movw	r30, r24
     a42:	80 81       	ld	r24, Z
     a44:	99 81       	ldd	r25, Y+1	; 0x01
     a46:	89 0f       	add	r24, r25
     a48:	89 83       	std	Y+1, r24	; 0x01
        if(SREG & (1<<C_SREG))
     a4a:	8f e5       	ldi	r24, 0x5F	; 95
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	fc 01       	movw	r30, r24
     a50:	80 81       	ld	r24, Z
     a52:	08 2e       	mov	r0, r24
     a54:	00 0c       	add	r0, r0
     a56:	99 0b       	sbc	r25, r25
     a58:	81 70       	andi	r24, 0x01	; 1
     a5a:	99 27       	eor	r25, r25
     a5c:	89 2b       	or	r24, r25
     a5e:	19 f0       	breq	.+6      	; 0xa66 <calc_checksum+0x54>
        {
            //carry wraparound
            checksum_result+=1;
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	8f 5f       	subi	r24, 0xFF	; 255
     a64:	89 83       	std	Y+1, r24	; 0x01
unsigned char calc_checksum(unsigned char *data, unsigned int dsize)
{
    //Storing checksum result in unsigned byte
    unsigned char checksum_result;

    for(int i=0;i<dsize;i++)
     a66:	8a 81       	ldd	r24, Y+2	; 0x02
     a68:	9b 81       	ldd	r25, Y+3	; 0x03
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	9b 83       	std	Y+3, r25	; 0x03
     a6e:	8a 83       	std	Y+2, r24	; 0x02
     a70:	2a 81       	ldd	r18, Y+2	; 0x02
     a72:	3b 81       	ldd	r19, Y+3	; 0x03
     a74:	8e 81       	ldd	r24, Y+6	; 0x06
     a76:	9f 81       	ldd	r25, Y+7	; 0x07
     a78:	28 17       	cp	r18, r24
     a7a:	39 07       	cpc	r19, r25
     a7c:	d8 f2       	brcs	.-74     	; 0xa34 <calc_checksum+0x22>
            checksum_result+=1;
        }

    }

    return ~checksum_result;
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	80 95       	com	r24

}
     a82:	27 96       	adiw	r28, 0x07	; 7
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <update_tcrit_hi>:

*/


int update_tcrit_hi(int value)
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	00 d0       	rcall	.+0      	; 0xa9a <update_tcrit_hi+0x6>
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	9a 83       	std	Y+2, r25	; 0x02
     aa0:	89 83       	std	Y+1, r24	; 0x01
    if (value > config.hi_warn && value <= 0x3FF)
     aa2:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <config+0x6>
     aa6:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <config+0x7>
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	9a 81       	ldd	r25, Y+2	; 0x02
     aae:	28 17       	cp	r18, r24
     ab0:	39 07       	cpc	r19, r25
     ab2:	74 f4       	brge	.+28     	; 0xad0 <update_tcrit_hi+0x3c>
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	9a 81       	ldd	r25, Y+2	; 0x02
     ab8:	81 15       	cp	r24, r1
     aba:	94 40       	sbci	r25, 0x04	; 4
     abc:	4c f4       	brge	.+18     	; 0xad0 <update_tcrit_hi+0x3c>
    {
        //Update value
        config.hi_alarm = value;
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <config+0x5>
     ac6:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <config+0x4>

        //return with no errors
        return 0;
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <update_tcrit_hi+0x40>
    }

    return 1;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
}
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <update_twarn_hi>:

int update_twarn_hi(int value)
{
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <update_twarn_hi+0x6>
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	9a 83       	std	Y+2, r25	; 0x02
     aea:	89 83       	std	Y+1, r24	; 0x01
    if (value > config.lo_warn && value < config.hi_alarm)
     aec:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <config+0xa>
     af0:	30 91 ad 04 	lds	r19, 0x04AD	; 0x8004ad <config+0xb>
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	94 f4       	brge	.+36     	; 0xb22 <update_twarn_hi+0x44>
     afe:	20 91 a6 04 	lds	r18, 0x04A6	; 0x8004a6 <config+0x4>
     b02:	30 91 a7 04 	lds	r19, 0x04A7	; 0x8004a7 <config+0x5>
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	82 17       	cp	r24, r18
     b0c:	93 07       	cpc	r25, r19
     b0e:	4c f4       	brge	.+18     	; 0xb22 <update_twarn_hi+0x44>
    {
        //Update value
        config.hi_warn = value;
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	9a 81       	ldd	r25, Y+2	; 0x02
     b14:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <config+0x7>
     b18:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <config+0x6>

        //return with no errors
        return 0;
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <update_twarn_hi+0x48>
    }

    return 1;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
}
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <update_twarn_lo>:

int update_twarn_lo(int value)
{
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	00 d0       	rcall	.+0      	; 0xb36 <update_twarn_lo+0x6>
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	9a 83       	std	Y+2, r25	; 0x02
     b3c:	89 83       	std	Y+1, r24	; 0x01
    if(value > config.lo_alarm && value < config.hi_warn)
     b3e:	20 91 aa 04 	lds	r18, 0x04AA	; 0x8004aa <config+0x8>
     b42:	30 91 ab 04 	lds	r19, 0x04AB	; 0x8004ab <config+0x9>
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	28 17       	cp	r18, r24
     b4c:	39 07       	cpc	r19, r25
     b4e:	94 f4       	brge	.+36     	; 0xb74 <update_twarn_lo+0x44>
     b50:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <config+0x6>
     b54:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <config+0x7>
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	82 17       	cp	r24, r18
     b5e:	93 07       	cpc	r25, r19
     b60:	4c f4       	brge	.+18     	; 0xb74 <update_twarn_lo+0x44>
    {
        //Update value
        config.lo_warn = value;
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	9a 81       	ldd	r25, Y+2	; 0x02
     b66:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <config+0xb>
     b6a:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <config+0xa>

        //return with 0 errors
        return 0;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <update_twarn_lo+0x48>
    }

    return 1;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
}
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <update_tcrit_lo>:

int update_tcrit_lo(int value)
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	00 d0       	rcall	.+0      	; 0xb88 <update_tcrit_lo+0x6>
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	9a 83       	std	Y+2, r25	; 0x02
     b8e:	89 83       	std	Y+1, r24	; 0x01
    if(value < config.lo_warn)
     b90:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <config+0xa>
     b94:	30 91 ad 04 	lds	r19, 0x04AD	; 0x8004ad <config+0xb>
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	82 17       	cp	r24, r18
     b9e:	93 07       	cpc	r25, r19
     ba0:	4c f4       	brge	.+18     	; 0xbb4 <update_tcrit_lo+0x32>
    {
        //Update
        config.lo_alarm = value;
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <config+0x9>
     baa:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <config+0x8>

        //return with no errors
        return 0;
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <update_tcrit_lo+0x36>
    }

    return 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
}
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <wdt_init>:
#pragma GCC push_options
#pragma GCC optimize ("Os")
void wdt_init()
{
    //Setting the pre-scalar for timeout period of 2s
    WDTCSR |= (1<<WDP0) | (1<<WDP1) | (1<<WDP2);
     bc2:	e0 e6       	ldi	r30, 0x60	; 96
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	87 60       	ori	r24, 0x07	; 7
     bca:	80 83       	st	Z, r24

    //Interrupt and system reset mode
    WDTCSR |= (1<<WDIE);
     bcc:	80 81       	ld	r24, Z
     bce:	80 64       	ori	r24, 0x40	; 64
     bd0:	80 83       	st	Z, r24

    WDTCSR |= (1<<WDE);
     bd2:	80 81       	ld	r24, Z
     bd4:	88 60       	ori	r24, 0x08	; 8
     bd6:	80 83       	st	Z, r24

    //Initizaize global interrupts
    SREG |= (1<<I_SREG);
     bd8:	8f b7       	in	r24, 0x3f	; 63
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	8f bf       	out	0x3f, r24	; 63
     bde:	08 95       	ret

00000be0 <wdt_reset>:
}
#pragma GCC pop_options

void wdt_reset()
{
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
    __builtin_avr_wdr();
     be8:	a8 95       	wdr
}
     bea:	00 00       	nop
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <wdt_force_restart>:

void wdt_force_restart()
{
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
    //disables interrupt
    SREG &= ~(1<<I_SREG);
     bfa:	8f e5       	ldi	r24, 0x5F	; 95
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	2f e5       	ldi	r18, 0x5F	; 95
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	f9 01       	movw	r30, r18
     c04:	20 81       	ld	r18, Z
     c06:	2f 77       	andi	r18, 0x7F	; 127
     c08:	fc 01       	movw	r30, r24
     c0a:	20 83       	st	Z, r18

    //Enabling change
    WDTCSR |= (1<<WDCE);
     c0c:	80 e6       	ldi	r24, 0x60	; 96
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	20 e6       	ldi	r18, 0x60	; 96
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	f9 01       	movw	r30, r18
     c16:	20 81       	ld	r18, Z
     c18:	20 61       	ori	r18, 0x10	; 16
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18

    //Clearing WDIE
    WDTCSR &= ~(1<<WDIE);
     c1e:	80 e6       	ldi	r24, 0x60	; 96
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	20 e6       	ldi	r18, 0x60	; 96
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	f9 01       	movw	r30, r18
     c28:	20 81       	ld	r18, Z
     c2a:	2f 7b       	andi	r18, 0xBF	; 191
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 83       	st	Z, r18

    //Wait for reset
    while(1);
     c30:	ff cf       	rjmp	.-2      	; 0xc30 <wdt_force_restart+0x3e>

00000c32 <__vector_6>:
}

void __vector_6(void) __attribute__ ((signal, used, externally_visible));

void __vector_6(void)
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	2f 93       	push	r18
     c40:	3f 93       	push	r19
     c42:	4f 93       	push	r20
     c44:	5f 93       	push	r21
     c46:	6f 93       	push	r22
     c48:	7f 93       	push	r23
     c4a:	8f 93       	push	r24
     c4c:	9f 93       	push	r25
     c4e:	af 93       	push	r26
     c50:	bf 93       	push	r27
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <__vector_6+0x2a>
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
    //Turns on LED
    led_on();
     c60:	0e 94 ca 01 	call	0x394	; 0x394 <led_on>

    //Add EVENT_WDT to system event log
    log_add_record(EVENT_WDT);
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <log_add_record>

    //Write modified log entries to EEPROM
    for(int i=0;i<16;i++)
     c6a:	1a 82       	std	Y+2, r1	; 0x02
     c6c:	19 82       	std	Y+1, r1	; 0x01
     c6e:	07 c0       	rjmp	.+14     	; 0xc7e <__vector_6+0x4c>
        log_update_noisr();
     c70:	0e 94 a7 08 	call	0x114e	; 0x114e <log_update_noisr>

    //Add EVENT_WDT to system event log
    log_add_record(EVENT_WDT);

    //Write modified log entries to EEPROM
    for(int i=0;i<16;i++)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	9a 83       	std	Y+2, r25	; 0x02
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	40 97       	sbiw	r24, 0x10	; 16
     c84:	ac f3       	brlt	.-22     	; 0xc70 <__vector_6+0x3e>
        log_update_noisr();


    //Write modified config data to EEPROM
    config_update_noisr();
     c86:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <config_update_noisr>

    //Set the interrupt
    WDTCSR |= (1<<WDIE);
     c8a:	80 e6       	ldi	r24, 0x60	; 96
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	20 e6       	ldi	r18, 0x60	; 96
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	20 64       	ori	r18, 0x40	; 64
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
}
     c9c:	00 00       	nop
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	ff 91       	pop	r31
     ca8:	ef 91       	pop	r30
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	7f 91       	pop	r23
     cb4:	6f 91       	pop	r22
     cb6:	5f 91       	pop	r21
     cb8:	4f 91       	pop	r20
     cba:	3f 91       	pop	r19
     cbc:	2f 91       	pop	r18
     cbe:	0f 90       	pop	r0
     cc0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <alarm_init>:
     cca:	08 95       	ret

00000ccc <alarm_send>:
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	ec 01       	movw	r28, r24
     cd2:	8a ed       	ldi	r24, 0xDA	; 218
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
     cda:	be 01       	movw	r22, r28
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_writedec32>
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <uart_writestr>

00000cf0 <config_set_modified>:
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <modified>
     cf6:	08 95       	ret

00000cf8 <config_is_data_valid>:
     cf8:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <config>
     cfc:	81 34       	cpi	r24, 0x41	; 65
     cfe:	61 f4       	brne	.+24     	; 0xd18 <config_is_data_valid+0x20>
     d00:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <config+0x1>
     d04:	83 35       	cpi	r24, 0x53	; 83
     d06:	41 f4       	brne	.+16     	; 0xd18 <config_is_data_valid+0x20>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	20 91 a4 04 	lds	r18, 0x04A4	; 0x8004a4 <config+0x2>
     d10:	25 35       	cpi	r18, 0x55	; 85
     d12:	21 f0       	breq	.+8      	; 0xd1c <config_is_data_valid+0x24>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <config_is_data_valid+0x24>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	e2 ea       	ldi	r30, 0xA2	; 162
     d1e:	f4 e0       	ldi	r31, 0x04	; 4
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	31 91       	ld	r19, Z+
     d24:	23 0f       	add	r18, r19
     d26:	34 e0       	ldi	r19, 0x04	; 4
     d28:	e5 3b       	cpi	r30, 0xB5	; 181
     d2a:	f3 07       	cpc	r31, r19
     d2c:	d1 f7       	brne	.-12     	; 0xd22 <config_is_data_valid+0x2a>
     d2e:	22 23       	and	r18, r18
     d30:	11 f0       	breq	.+4      	; 0xd36 <config_is_data_valid+0x3e>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	08 95       	ret

00000d38 <config_write_defaults>:
     d38:	62 e1       	ldi	r22, 0x12	; 18
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 86 12 	call	0x250c	; 0x250c <update_checksum>
     d44:	42 e1       	ldi	r20, 0x12	; 18
     d46:	62 e0       	ldi	r22, 0x02	; 2
     d48:	71 e0       	ldi	r23, 0x01	; 1
     d4a:	80 e4       	ldi	r24, 0x40	; 64
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0c 94 39 07 	jmp	0xe72	; 0xe72 <eeprom_writebuf>

00000d52 <config_init>:
     d52:	0e 94 82 07 	call	0xf04	; 0xf04 <eeprom_isbusy>
     d56:	89 2b       	or	r24, r25
     d58:	e1 f7       	brne	.-8      	; 0xd52 <config_init>
     d5a:	42 e1       	ldi	r20, 0x12	; 18
     d5c:	62 ea       	ldi	r22, 0xA2	; 162
     d5e:	74 e0       	ldi	r23, 0x04	; 4
     d60:	80 e4       	ldi	r24, 0x40	; 64
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 6d 07 	call	0xeda	; 0xeda <eeprom_readbuf>
     d68:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <config_is_data_valid>
     d6c:	89 2b       	or	r24, r25
     d6e:	49 f4       	brne	.+18     	; 0xd82 <config_init+0x30>
     d70:	0e 94 9c 06 	call	0xd38	; 0xd38 <config_write_defaults>
     d74:	42 e1       	ldi	r20, 0x12	; 18
     d76:	62 ea       	ldi	r22, 0xA2	; 162
     d78:	74 e0       	ldi	r23, 0x04	; 4
     d7a:	80 e4       	ldi	r24, 0x40	; 64
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 6d 07 	call	0xeda	; 0xeda <eeprom_readbuf>
     d82:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <modified>
     d86:	08 95       	ret

00000d88 <config_update>:
     d88:	0e 94 82 07 	call	0xf04	; 0xf04 <eeprom_isbusy>
     d8c:	89 2b       	or	r24, r25
     d8e:	99 f4       	brne	.+38     	; 0xdb6 <config_update+0x2e>
     d90:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <modified>
     d94:	88 23       	and	r24, r24
     d96:	79 f0       	breq	.+30     	; 0xdb6 <config_update+0x2e>
     d98:	62 e1       	ldi	r22, 0x12	; 18
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	82 ea       	ldi	r24, 0xA2	; 162
     d9e:	94 e0       	ldi	r25, 0x04	; 4
     da0:	0e 94 86 12 	call	0x250c	; 0x250c <update_checksum>
     da4:	42 e1       	ldi	r20, 0x12	; 18
     da6:	62 ea       	ldi	r22, 0xA2	; 162
     da8:	74 e0       	ldi	r23, 0x04	; 4
     daa:	80 e4       	ldi	r24, 0x40	; 64
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 39 07 	call	0xe72	; 0xe72 <eeprom_writebuf>
     db2:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <modified>
     db6:	08 95       	ret

00000db8 <config_update_noisr>:
     db8:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <modified>
     dbc:	88 23       	and	r24, r24
     dbe:	79 f0       	breq	.+30     	; 0xdde <config_update_noisr+0x26>
     dc0:	62 e1       	ldi	r22, 0x12	; 18
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	82 ea       	ldi	r24, 0xA2	; 162
     dc6:	94 e0       	ldi	r25, 0x04	; 4
     dc8:	0e 94 86 12 	call	0x250c	; 0x250c <update_checksum>
     dcc:	42 e1       	ldi	r20, 0x12	; 18
     dce:	62 ea       	ldi	r22, 0xA2	; 162
     dd0:	74 e0       	ldi	r23, 0x04	; 4
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 56 07 	call	0xeac	; 0xeac <eeprom_writebuf_noisr>
     dda:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <modified>
     dde:	08 95       	ret

00000de0 <eeprom_startwrite>:
     de0:	fa 9a       	sbi	0x1f, 2	; 31
     de2:	f9 9a       	sbi	0x1f, 1	; 31
     de4:	08 95       	ret

00000de6 <__vector_22>:
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
     e08:	e0 91 f8 04 	lds	r30, 0x04F8	; 0x8004f8 <bufidx>
     e0c:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <writesize>
     e10:	e8 17       	cp	r30, r24
     e12:	20 f0       	brcs	.+8      	; 0xe1c <__vector_22+0x36>
     e14:	fb 98       	cbi	0x1f, 3	; 31
     e16:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <write_busy>
     e1a:	1a c0       	rjmp	.+52     	; 0xe50 <__vector_22+0x6a>
     e1c:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <writeaddr>
     e20:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <writeaddr+0x1>
     e24:	92 bd       	out	0x22, r25	; 34
     e26:	81 bd       	out	0x21, r24	; 33
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	8e 0f       	add	r24, r30
     e2c:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <bufidx>
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	e8 54       	subi	r30, 0x48	; 72
     e34:	fb 4f       	sbci	r31, 0xFB	; 251
     e36:	80 81       	ld	r24, Z
     e38:	80 bd       	out	0x20, r24	; 32
     e3a:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <writeaddr>
     e3e:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <writeaddr+0x1>
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <writeaddr+0x1>
     e48:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <writeaddr>
     e4c:	0e 94 f0 06 	call	0xde0	; 0xde0 <eeprom_startwrite>
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti

00000e72 <eeprom_writebuf>:
     e72:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <write_busy>
     e76:	21 11       	cpse	r18, r1
     e78:	fc cf       	rjmp	.-8      	; 0xe72 <eeprom_writebuf>
     e7a:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <writeaddr+0x1>
     e7e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <writeaddr>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <write_busy>
     e88:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <bufidx>
     e8c:	40 93 b7 04 	sts	0x04B7, r20	; 0x8004b7 <writesize>
     e90:	96 2f       	mov	r25, r22
     e92:	a8 eb       	ldi	r26, 0xB8	; 184
     e94:	b4 e0       	ldi	r27, 0x04	; 4
     e96:	fb 01       	movw	r30, r22
     e98:	8e 2f       	mov	r24, r30
     e9a:	89 1b       	sub	r24, r25
     e9c:	84 17       	cp	r24, r20
     e9e:	18 f4       	brcc	.+6      	; 0xea6 <eeprom_writebuf+0x34>
     ea0:	81 91       	ld	r24, Z+
     ea2:	8d 93       	st	X+, r24
     ea4:	f9 cf       	rjmp	.-14     	; 0xe98 <eeprom_writebuf+0x26>
     ea6:	78 94       	sei
     ea8:	fb 9a       	sbi	0x1f, 3	; 31
     eaa:	08 95       	ret

00000eac <eeprom_writebuf_noisr>:
     eac:	fb 01       	movw	r30, r22
     eae:	86 1b       	sub	r24, r22
     eb0:	97 0b       	sbc	r25, r23
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	dc 01       	movw	r26, r24
     eb6:	ae 0f       	add	r26, r30
     eb8:	bf 1f       	adc	r27, r31
     eba:	9f 01       	movw	r18, r30
     ebc:	26 1b       	sub	r18, r22
     ebe:	37 0b       	sbc	r19, r23
     ec0:	24 17       	cp	r18, r20
     ec2:	35 07       	cpc	r19, r21
     ec4:	48 f4       	brcc	.+18     	; 0xed8 <eeprom_writebuf_noisr+0x2c>
     ec6:	f9 99       	sbic	0x1f, 1	; 31
     ec8:	fe cf       	rjmp	.-4      	; 0xec6 <eeprom_writebuf_noisr+0x1a>
     eca:	b2 bd       	out	0x22, r27	; 34
     ecc:	a1 bd       	out	0x21, r26	; 33
     ece:	21 91       	ld	r18, Z+
     ed0:	20 bd       	out	0x20, r18	; 32
     ed2:	fa 9a       	sbi	0x1f, 2	; 31
     ed4:	f9 9a       	sbi	0x1f, 1	; 31
     ed6:	ee cf       	rjmp	.-36     	; 0xeb4 <eeprom_writebuf_noisr+0x8>
     ed8:	08 95       	ret

00000eda <eeprom_readbuf>:
     eda:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <write_busy>
     ede:	21 11       	cpse	r18, r1
     ee0:	fc cf       	rjmp	.-8      	; 0xeda <eeprom_readbuf>
     ee2:	fb 01       	movw	r30, r22
     ee4:	86 1b       	sub	r24, r22
     ee6:	97 0b       	sbc	r25, r23
     ee8:	2e 2f       	mov	r18, r30
     eea:	26 1b       	sub	r18, r22
     eec:	24 17       	cp	r18, r20
     eee:	48 f4       	brcc	.+18     	; 0xf02 <eeprom_readbuf+0x28>
     ef0:	9c 01       	movw	r18, r24
     ef2:	2e 0f       	add	r18, r30
     ef4:	3f 1f       	adc	r19, r31
     ef6:	32 bd       	out	0x22, r19	; 34
     ef8:	21 bd       	out	0x21, r18	; 33
     efa:	f8 9a       	sbi	0x1f, 0	; 31
     efc:	20 b5       	in	r18, 0x20	; 32
     efe:	21 93       	st	Z+, r18
     f00:	f3 cf       	rjmp	.-26     	; 0xee8 <eeprom_readbuf+0xe>
     f02:	08 95       	ret

00000f04 <eeprom_isbusy>:
     f04:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <write_busy>
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	08 95       	ret

00000f0c <log_is_data_valid>:
     f0c:	80 31       	cpi	r24, 0x10	; 16
     f0e:	91 05       	cpc	r25, r1
     f10:	04 f5       	brge	.+64     	; 0xf52 <log_is_data_valid+0x46>
     f12:	27 e0       	ldi	r18, 0x07	; 7
     f14:	28 9f       	mul	r18, r24
     f16:	a0 01       	movw	r20, r0
     f18:	29 9f       	mul	r18, r25
     f1a:	50 0d       	add	r21, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	fa 01       	movw	r30, r20
     f20:	e1 53       	subi	r30, 0x31	; 49
     f22:	fc 4f       	sbci	r31, 0xFC	; 252
     f24:	80 81       	ld	r24, Z
     f26:	81 32       	cpi	r24, 0x21	; 33
     f28:	a0 f4       	brcc	.+40     	; 0xf52 <log_is_data_valid+0x46>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	fa 01       	movw	r30, r20
     f32:	e8 0f       	add	r30, r24
     f34:	f9 1f       	adc	r31, r25
     f36:	e1 53       	subi	r30, 0x31	; 49
     f38:	fc 4f       	sbci	r31, 0xFC	; 252
     f3a:	30 81       	ld	r19, Z
     f3c:	23 0f       	add	r18, r19
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	87 30       	cpi	r24, 0x07	; 7
     f42:	91 05       	cpc	r25, r1
     f44:	a9 f7       	brne	.-22     	; 0xf30 <log_is_data_valid+0x24>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	22 23       	and	r18, r18
     f4c:	21 f0       	breq	.+8      	; 0xf56 <log_is_data_valid+0x4a>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	08 95       	ret
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	08 95       	ret

00000f58 <log_init>:
     f58:	6f 92       	push	r6
     f5a:	7f 92       	push	r7
     f5c:	8f 92       	push	r8
     f5e:	9f 92       	push	r9
     f60:	af 92       	push	r10
     f62:	bf 92       	push	r11
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	0e 94 82 07 	call	0xf04	; 0xf04 <eeprom_isbusy>
     f78:	89 2b       	or	r24, r25
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <log_init+0x1c>
     f7c:	0f e3       	ldi	r16, 0x3F	; 63
     f7e:	14 e0       	ldi	r17, 0x04	; 4
     f80:	c0 e8       	ldi	r28, 0x80	; 128
     f82:	d0 e0       	ldi	r29, 0x00	; 0
     f84:	be 01       	movw	r22, r28
     f86:	61 5b       	subi	r22, 0xB1	; 177
     f88:	7c 4f       	sbci	r23, 0xFC	; 252
     f8a:	47 e0       	ldi	r20, 0x07	; 7
     f8c:	ce 01       	movw	r24, r28
     f8e:	0e 94 6d 07 	call	0xeda	; 0xeda <eeprom_readbuf>
     f92:	f8 01       	movw	r30, r16
     f94:	11 92       	st	Z+, r1
     f96:	8f 01       	movw	r16, r30
     f98:	27 96       	adiw	r28, 0x07	; 7
     f9a:	c0 3f       	cpi	r28, 0xF0	; 240
     f9c:	d1 05       	cpc	r29, r1
     f9e:	91 f7       	brne	.-28     	; 0xf84 <log_init+0x2c>
     fa0:	4f ec       	ldi	r20, 0xCF	; 207
     fa2:	e4 2e       	mov	r14, r20
     fa4:	43 e0       	ldi	r20, 0x03	; 3
     fa6:	f4 2e       	mov	r15, r20
     fa8:	87 01       	movw	r16, r14
     faa:	c0 e0       	ldi	r28, 0x00	; 0
     fac:	d0 e0       	ldi	r29, 0x00	; 0
     fae:	d1 2c       	mov	r13, r1
     fb0:	b1 2c       	mov	r11, r1
     fb2:	77 24       	eor	r7, r7
     fb4:	7a 94       	dec	r7
     fb6:	ce 01       	movw	r24, r28
     fb8:	0e 94 86 07 	call	0xf0c	; 0xf0c <log_is_data_valid>
     fbc:	89 2b       	or	r24, r25
     fbe:	41 f0       	breq	.+16     	; 0xfd0 <log_init+0x78>
     fc0:	f8 01       	movw	r30, r16
     fc2:	80 81       	ld	r24, Z
     fc4:	87 15       	cp	r24, r7
     fc6:	20 f4       	brcc	.+8      	; 0xfd0 <log_init+0x78>
     fc8:	bc 2e       	mov	r11, r28
     fca:	78 2e       	mov	r7, r24
     fcc:	dd 24       	eor	r13, r13
     fce:	d3 94       	inc	r13
     fd0:	21 96       	adiw	r28, 0x01	; 1
     fd2:	09 5f       	subi	r16, 0xF9	; 249
     fd4:	1f 4f       	sbci	r17, 0xFF	; 255
     fd6:	c0 31       	cpi	r28, 0x10	; 16
     fd8:	d1 05       	cpc	r29, r1
     fda:	69 f7       	brne	.-38     	; 0xfb6 <log_init+0x5e>
     fdc:	dd 20       	and	r13, r13
     fde:	09 f4       	brne	.+2      	; 0xfe2 <log_init+0x8a>
     fe0:	6a c0       	rjmp	.+212    	; 0x10b6 <log_init+0x15e>
     fe2:	b0 92 ce 03 	sts	0x03CE, r11	; 0x8003ce <last_written>
     fe6:	70 92 cd 03 	sts	0x03CD, r7	; 0x8003cd <last_transaction_written>
     fea:	cb 2d       	mov	r28, r11
     fec:	d0 e0       	ldi	r29, 0x00	; 0
     fee:	8e 01       	movw	r16, r28
     ff0:	0f 5f       	subi	r16, 0xFF	; 255
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	87 2c       	mov	r8, r7
     ff6:	2f e0       	ldi	r18, 0x0F	; 15
     ff8:	a2 2e       	mov	r10, r18
     ffa:	37 e0       	ldi	r19, 0x07	; 7
     ffc:	93 2e       	mov	r9, r19
     ffe:	68 01       	movw	r12, r16
    1000:	ff e0       	ldi	r31, 0x0F	; 15
    1002:	cf 22       	and	r12, r31
    1004:	dd 24       	eor	r13, r13
    1006:	c6 01       	movw	r24, r12
    1008:	0e 94 86 07 	call	0xf0c	; 0xf0c <log_is_data_valid>
    100c:	89 2b       	or	r24, r25
    100e:	61 f4       	brne	.+24     	; 0x1028 <log_init+0xd0>
    1010:	b0 92 cc 03 	sts	0x03CC, r11	; 0x8003cc <tail>
    1014:	8e 01       	movw	r16, r28
    1016:	01 50       	subi	r16, 0x01	; 1
    1018:	11 09       	sbc	r17, r1
    101a:	60 97       	sbiw	r28, 0x10	; 16
    101c:	80 e1       	ldi	r24, 0x10	; 16
    101e:	a8 2e       	mov	r10, r24
    1020:	b1 2c       	mov	r11, r1
    1022:	97 e0       	ldi	r25, 0x07	; 7
    1024:	69 2e       	mov	r6, r25
    1026:	3a c0       	rjmp	.+116    	; 0x109c <log_init+0x144>
    1028:	9c 9c       	mul	r9, r12
    102a:	f0 01       	movw	r30, r0
    102c:	9d 9c       	mul	r9, r13
    102e:	f0 0d       	add	r31, r0
    1030:	11 24       	eor	r1, r1
    1032:	e1 53       	subi	r30, 0x31	; 49
    1034:	fc 4f       	sbci	r31, 0xFC	; 252
    1036:	40 81       	ld	r20, Z
    1038:	24 2f       	mov	r18, r20
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	88 2d       	mov	r24, r8
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	8f 71       	andi	r24, 0x1F	; 31
    1044:	99 27       	eor	r25, r25
    1046:	28 17       	cp	r18, r24
    1048:	39 07       	cpc	r19, r25
    104a:	11 f7       	brne	.-60     	; 0x1010 <log_init+0xb8>
    104c:	c0 92 ce 03 	sts	0x03CE, r12	; 0x8003ce <last_written>
    1050:	40 93 cd 03 	sts	0x03CD, r20	; 0x8003cd <last_transaction_written>
    1054:	aa 94       	dec	r10
    1056:	0f 5f       	subi	r16, 0xFF	; 255
    1058:	1f 4f       	sbci	r17, 0xFF	; 255
    105a:	aa 20       	and	r10, r10
    105c:	c9 f2       	breq	.-78     	; 0x1010 <log_init+0xb8>
    105e:	84 2e       	mov	r8, r20
    1060:	ce cf       	rjmp	.-100    	; 0xffe <log_init+0xa6>
    1062:	f7 01       	movw	r30, r14
    1064:	20 81       	ld	r18, Z
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	87 2d       	mov	r24, r7
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	4f 96       	adiw	r24, 0x1f	; 31
    106e:	8f 71       	andi	r24, 0x1F	; 31
    1070:	99 27       	eor	r25, r25
    1072:	28 17       	cp	r18, r24
    1074:	39 07       	cpc	r19, r25
    1076:	31 f5       	brne	.+76     	; 0x10c4 <log_init+0x16c>
    1078:	c0 92 cc 03 	sts	0x03CC, r12	; 0x8003cc <tail>
    107c:	68 9c       	mul	r6, r8
    107e:	f0 01       	movw	r30, r0
    1080:	69 9c       	mul	r6, r9
    1082:	f0 0d       	add	r31, r0
    1084:	11 24       	eor	r1, r1
    1086:	e1 53       	subi	r30, 0x31	; 49
    1088:	fc 4f       	sbci	r31, 0xFC	; 252
    108a:	70 80       	ld	r7, Z
    108c:	01 50       	subi	r16, 0x01	; 1
    108e:	11 09       	sbc	r17, r1
    1090:	f7 e0       	ldi	r31, 0x07	; 7
    1092:	ef 0e       	add	r14, r31
    1094:	f1 1c       	adc	r15, r1
    1096:	0c 17       	cp	r16, r28
    1098:	1d 07       	cpc	r17, r29
    109a:	a1 f0       	breq	.+40     	; 0x10c4 <log_init+0x16c>
    109c:	c8 01       	movw	r24, r16
    109e:	b5 01       	movw	r22, r10
    10a0:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__divmodhi4>
    10a4:	6c 01       	movw	r12, r24
    10a6:	4c 01       	movw	r8, r24
    10a8:	99 24       	eor	r9, r9
    10aa:	c4 01       	movw	r24, r8
    10ac:	0e 94 86 07 	call	0xf0c	; 0xf0c <log_is_data_valid>
    10b0:	89 2b       	or	r24, r25
    10b2:	b9 f6       	brne	.-82     	; 0x1062 <log_init+0x10a>
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <log_init+0x16c>
    10b6:	8f e0       	ldi	r24, 0x0F	; 15
    10b8:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <last_written>
    10bc:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <last_transaction_written>
    10c0:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <tail>
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	9f 90       	pop	r9
    10da:	8f 90       	pop	r8
    10dc:	7f 90       	pop	r7
    10de:	6f 90       	pop	r6
    10e0:	08 95       	ret

000010e2 <log_update>:
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	0e 94 82 07 	call	0xf04	; 0xf04 <eeprom_isbusy>
    10f0:	89 2b       	or	r24, r25
    10f2:	39 f5       	brne	.+78     	; 0x1142 <log_update+0x60>
    10f4:	ef e3       	ldi	r30, 0x3F	; 63
    10f6:	f4 e0       	ldi	r31, 0x04	; 4
    10f8:	c0 e0       	ldi	r28, 0x00	; 0
    10fa:	d0 e0       	ldi	r29, 0x00	; 0
    10fc:	81 91       	ld	r24, Z+
    10fe:	88 23       	and	r24, r24
    1100:	e1 f0       	breq	.+56     	; 0x113a <log_update+0x58>
    1102:	17 e0       	ldi	r17, 0x07	; 7
    1104:	1c 9f       	mul	r17, r28
    1106:	c0 01       	movw	r24, r0
    1108:	1d 9f       	mul	r17, r29
    110a:	90 0d       	add	r25, r0
    110c:	11 24       	eor	r1, r1
    110e:	9c 01       	movw	r18, r24
    1110:	21 53       	subi	r18, 0x31	; 49
    1112:	3c 4f       	sbci	r19, 0xFC	; 252
    1114:	79 01       	movw	r14, r18
    1116:	67 e0       	ldi	r22, 0x07	; 7
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	c9 01       	movw	r24, r18
    111c:	0e 94 86 12 	call	0x250c	; 0x250c <update_checksum>
    1120:	c1 9f       	mul	r28, r17
    1122:	c0 01       	movw	r24, r0
    1124:	11 24       	eor	r1, r1
    1126:	47 e0       	ldi	r20, 0x07	; 7
    1128:	b7 01       	movw	r22, r14
    112a:	80 58       	subi	r24, 0x80	; 128
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	0e 94 39 07 	call	0xe72	; 0xe72 <eeprom_writebuf>
    1132:	c1 5c       	subi	r28, 0xC1	; 193
    1134:	db 4f       	sbci	r29, 0xFB	; 251
    1136:	18 82       	st	Y, r1
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <log_update+0x60>
    113a:	21 96       	adiw	r28, 0x01	; 1
    113c:	c0 31       	cpi	r28, 0x10	; 16
    113e:	d1 05       	cpc	r29, r1
    1140:	e9 f6       	brne	.-70     	; 0x10fc <log_update+0x1a>
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	ff 90       	pop	r15
    114a:	ef 90       	pop	r14
    114c:	08 95       	ret

0000114e <log_update_noisr>:
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	ef e3       	ldi	r30, 0x3F	; 63
    115a:	f4 e0       	ldi	r31, 0x04	; 4
    115c:	c0 e0       	ldi	r28, 0x00	; 0
    115e:	d0 e0       	ldi	r29, 0x00	; 0
    1160:	81 91       	ld	r24, Z+
    1162:	88 23       	and	r24, r24
    1164:	e1 f0       	breq	.+56     	; 0x119e <log_update_noisr+0x50>
    1166:	17 e0       	ldi	r17, 0x07	; 7
    1168:	1c 9f       	mul	r17, r28
    116a:	c0 01       	movw	r24, r0
    116c:	1d 9f       	mul	r17, r29
    116e:	90 0d       	add	r25, r0
    1170:	11 24       	eor	r1, r1
    1172:	9c 01       	movw	r18, r24
    1174:	21 53       	subi	r18, 0x31	; 49
    1176:	3c 4f       	sbci	r19, 0xFC	; 252
    1178:	79 01       	movw	r14, r18
    117a:	67 e0       	ldi	r22, 0x07	; 7
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	c9 01       	movw	r24, r18
    1180:	0e 94 86 12 	call	0x250c	; 0x250c <update_checksum>
    1184:	c1 9f       	mul	r28, r17
    1186:	c0 01       	movw	r24, r0
    1188:	11 24       	eor	r1, r1
    118a:	47 e0       	ldi	r20, 0x07	; 7
    118c:	b7 01       	movw	r22, r14
    118e:	80 58       	subi	r24, 0x80	; 128
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	0e 94 56 07 	call	0xeac	; 0xeac <eeprom_writebuf_noisr>
    1196:	c1 5c       	subi	r28, 0xC1	; 193
    1198:	db 4f       	sbci	r29, 0xFB	; 251
    119a:	18 82       	st	Y, r1
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <log_update_noisr+0x58>
    119e:	21 96       	adiw	r28, 0x01	; 1
    11a0:	c0 31       	cpi	r28, 0x10	; 16
    11a2:	d1 05       	cpc	r29, r1
    11a4:	e9 f6       	brne	.-70     	; 0x1160 <log_update_noisr+0x12>
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	08 95       	ret

000011b2 <log_add_record>:
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	e8 2e       	mov	r14, r24
    11c0:	c0 91 ce 03 	lds	r28, 0x03CE	; 0x8003ce <last_written>
    11c4:	d0 e0       	ldi	r29, 0x00	; 0
    11c6:	21 96       	adiw	r28, 0x01	; 1
    11c8:	cf 70       	andi	r28, 0x0F	; 15
    11ca:	dd 27       	eor	r29, r29
    11cc:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <tail>
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 86 07 	call	0xf0c	; 0xf0c <log_is_data_valid>
    11d6:	f8 2e       	mov	r15, r24
    11d8:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <last_transaction_written>
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	81 32       	cpi	r24, 0x21	; 33
    11e0:	18 f4       	brcc	.+6      	; 0x11e8 <log_add_record+0x36>
    11e2:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <last_transaction_written>
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <log_add_record+0x3a>
    11e8:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <last_transaction_written>
    11ec:	87 e0       	ldi	r24, 0x07	; 7
    11ee:	8c 9f       	mul	r24, r28
    11f0:	80 01       	movw	r16, r0
    11f2:	8d 9f       	mul	r24, r29
    11f4:	10 0d       	add	r17, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	01 53       	subi	r16, 0x31	; 49
    11fa:	1c 4f       	sbci	r17, 0xFC	; 252
    11fc:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <last_transaction_written>
    1200:	f8 01       	movw	r30, r16
    1202:	80 83       	st	Z, r24
    1204:	0e 94 a6 09 	call	0x134c	; 0x134c <rtc_get_date>
    1208:	f8 01       	movw	r30, r16
    120a:	61 83       	std	Z+1, r22	; 0x01
    120c:	72 83       	std	Z+2, r23	; 0x02
    120e:	83 83       	std	Z+3, r24	; 0x03
    1210:	94 83       	std	Z+4, r25	; 0x04
    1212:	e5 82       	std	Z+5, r14	; 0x05
    1214:	c0 93 ce 03 	sts	0x03CE, r28	; 0x8003ce <last_written>
    1218:	67 e0       	ldi	r22, 0x07	; 7
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	c8 01       	movw	r24, r16
    121e:	0e 94 86 12 	call	0x250c	; 0x250c <update_checksum>
    1222:	c1 5c       	subi	r28, 0xC1	; 193
    1224:	db 4f       	sbci	r29, 0xFB	; 251
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	88 83       	st	Y, r24
    122a:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <last_written>
    122e:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <tail>
    1232:	89 13       	cpse	r24, r25
    1234:	08 c0       	rjmp	.+16     	; 0x1246 <log_add_record+0x94>
    1236:	ff 20       	and	r15, r15
    1238:	31 f0       	breq	.+12     	; 0x1246 <log_add_record+0x94>
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	8f 70       	andi	r24, 0x0F	; 15
    1240:	99 27       	eor	r25, r25
    1242:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <tail>
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	08 95       	ret

00001254 <log_clear>:
    1254:	ef ec       	ldi	r30, 0xCF	; 207
    1256:	f3 e0       	ldi	r31, 0x03	; 3
    1258:	af e3       	ldi	r26, 0x3F	; 63
    125a:	b4 e0       	ldi	r27, 0x04	; 4
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	4f ef       	ldi	r20, 0xFF	; 255
    1260:	5f ef       	ldi	r21, 0xFF	; 255
    1262:	ba 01       	movw	r22, r20
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	80 83       	st	Z, r24
    1268:	85 83       	std	Z+5, r24	; 0x05
    126a:	41 83       	std	Z+1, r20	; 0x01
    126c:	52 83       	std	Z+2, r21	; 0x02
    126e:	63 83       	std	Z+3, r22	; 0x03
    1270:	74 83       	std	Z+4, r23	; 0x04
    1272:	9d 93       	st	X+, r25
    1274:	37 96       	adiw	r30, 0x07	; 7
    1276:	24 e0       	ldi	r18, 0x04	; 4
    1278:	ef 33       	cpi	r30, 0x3F	; 63
    127a:	f2 07       	cpc	r31, r18
    127c:	a1 f7       	brne	.-24     	; 0x1266 <log_clear+0x12>
    127e:	8f e0       	ldi	r24, 0x0F	; 15
    1280:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <last_written>
    1284:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <tail>
    1288:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <last_transaction_written>
    128c:	08 95       	ret

0000128e <log_get_num_entries>:
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	00 91 cc 03 	lds	r16, 0x03CC	; 0x8003cc <tail>
    129a:	c0 2f       	mov	r28, r16
    129c:	10 e0       	ldi	r17, 0x00	; 0
    129e:	d0 e0       	ldi	r29, 0x00	; 0
    12a0:	ce 01       	movw	r24, r28
    12a2:	0e 94 86 07 	call	0xf0c	; 0xf0c <log_is_data_valid>
    12a6:	89 2b       	or	r24, r25
    12a8:	29 f0       	breq	.+10     	; 0x12b4 <log_get_num_entries+0x26>
    12aa:	21 96       	adiw	r28, 0x01	; 1
    12ac:	cf 70       	andi	r28, 0x0F	; 15
    12ae:	1f 5f       	subi	r17, 0xFF	; 255
    12b0:	0c 13       	cpse	r16, r28
    12b2:	f5 cf       	rjmp	.-22     	; 0x129e <log_get_num_entries+0x10>
    12b4:	81 2f       	mov	r24, r17
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	08 95       	ret

000012c0 <log_get_record>:
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	6b 01       	movw	r12, r22
    12d6:	7c 01       	movw	r14, r24
    12d8:	8a 01       	movw	r16, r20
    12da:	59 01       	movw	r10, r18
    12dc:	0e 94 47 09 	call	0x128e	; 0x128e <log_get_num_entries>
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	c8 16       	cp	r12, r24
    12e8:	d9 06       	cpc	r13, r25
    12ea:	ea 06       	cpc	r14, r26
    12ec:	fb 06       	cpc	r15, r27
    12ee:	f8 f4       	brcc	.+62     	; 0x132e <log_get_record+0x6e>
    12f0:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <tail>
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	c8 0e       	add	r12, r24
    12f8:	d9 1e       	adc	r13, r25
    12fa:	8f e0       	ldi	r24, 0x0F	; 15
    12fc:	c8 22       	and	r12, r24
    12fe:	dd 24       	eor	r13, r13
    1300:	87 e0       	ldi	r24, 0x07	; 7
    1302:	8c 9d       	mul	r24, r12
    1304:	f0 01       	movw	r30, r0
    1306:	8d 9d       	mul	r24, r13
    1308:	f0 0d       	add	r31, r0
    130a:	11 24       	eor	r1, r1
    130c:	e1 53       	subi	r30, 0x31	; 49
    130e:	fc 4f       	sbci	r31, 0xFC	; 252
    1310:	81 81       	ldd	r24, Z+1	; 0x01
    1312:	92 81       	ldd	r25, Z+2	; 0x02
    1314:	a3 81       	ldd	r26, Z+3	; 0x03
    1316:	b4 81       	ldd	r27, Z+4	; 0x04
    1318:	e8 01       	movw	r28, r16
    131a:	88 83       	st	Y, r24
    131c:	99 83       	std	Y+1, r25	; 0x01
    131e:	aa 83       	std	Y+2, r26	; 0x02
    1320:	bb 83       	std	Y+3, r27	; 0x03
    1322:	85 81       	ldd	r24, Z+5	; 0x05
    1324:	f5 01       	movw	r30, r10
    1326:	80 83       	st	Z, r24
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <log_get_record+0x72>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	df 90       	pop	r13
    1340:	cf 90       	pop	r12
    1342:	bf 90       	pop	r11
    1344:	af 90       	pop	r10
    1346:	08 95       	ret

00001348 <rtc_init>:
    1348:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <timer1_init>

0000134c <rtc_get_date>:
    134c:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <timer1_get>

00001350 <rtc_set_date>:
    1350:	60 93 f9 04 	sts	0x04F9, r22	; 0x8004f9 <rtc_base>
    1354:	70 93 fa 04 	sts	0x04FA, r23	; 0x8004fa <rtc_base+0x1>
    1358:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <rtc_base+0x2>
    135c:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <rtc_base+0x3>
    1360:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <timer1_clear>

00001364 <is_leapyear>:
    1364:	9c 01       	movw	r18, r24
    1366:	60 e9       	ldi	r22, 0x90	; 144
    1368:	71 e0       	ldi	r23, 0x01	; 1
    136a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodhi4>
    136e:	89 2b       	or	r24, r25
    1370:	79 f0       	breq	.+30     	; 0x1390 <is_leapyear+0x2c>
    1372:	c9 01       	movw	r24, r18
    1374:	83 70       	andi	r24, 0x03	; 3
    1376:	99 27       	eor	r25, r25
    1378:	89 2b       	or	r24, r25
    137a:	61 f4       	brne	.+24     	; 0x1394 <is_leapyear+0x30>
    137c:	c9 01       	movw	r24, r18
    137e:	64 e6       	ldi	r22, 0x64	; 100
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodhi4>
    1386:	9c 01       	movw	r18, r24
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	23 2b       	or	r18, r19
    138c:	21 f4       	brne	.+8      	; 0x1396 <is_leapyear+0x32>
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <is_leapyear+0x30>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	08 95       	ret
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	08 95       	ret

00001398 <rtc_set_by_datestr>:
    1398:	2f 92       	push	r2
    139a:	3f 92       	push	r3
    139c:	4f 92       	push	r4
    139e:	5f 92       	push	r5
    13a0:	6f 92       	push	r6
    13a2:	7f 92       	push	r7
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	67 97       	sbiw	r28, 0x17	; 23
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	2c e0       	ldi	r18, 0x0C	; 12
    13ce:	e7 e9       	ldi	r30, 0x97	; 151
    13d0:	f1 e0       	ldi	r31, 0x01	; 1
    13d2:	ae 01       	movw	r20, r28
    13d4:	4f 5f       	subi	r20, 0xFF	; 255
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	1a 01       	movw	r2, r20
    13da:	da 01       	movw	r26, r20
    13dc:	01 90       	ld	r0, Z+
    13de:	0d 92       	st	X+, r0
    13e0:	2a 95       	dec	r18
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <rtc_set_by_datestr+0x44>
    13e4:	dc 01       	movw	r26, r24
    13e6:	2c 91       	ld	r18, X
    13e8:	22 0f       	add	r18, r18
    13ea:	20 56       	subi	r18, 0x60	; 96
    13ec:	32 2f       	mov	r19, r18
    13ee:	33 0f       	add	r19, r19
    13f0:	33 0f       	add	r19, r19
    13f2:	23 0f       	add	r18, r19
    13f4:	11 96       	adiw	r26, 0x01	; 1
    13f6:	3c 91       	ld	r19, X
    13f8:	11 97       	sbiw	r26, 0x01	; 1
    13fa:	31 53       	subi	r19, 0x31	; 49
    13fc:	23 0f       	add	r18, r19
    13fe:	2d 87       	std	Y+13, r18	; 0x0d
    1400:	13 96       	adiw	r26, 0x03	; 3
    1402:	2c 91       	ld	r18, X
    1404:	13 97       	sbiw	r26, 0x03	; 3
    1406:	02 2e       	mov	r0, r18
    1408:	00 0c       	add	r0, r0
    140a:	33 0b       	sbc	r19, r19
    140c:	20 53       	subi	r18, 0x30	; 48
    140e:	31 09       	sbc	r19, r1
    1410:	6a e0       	ldi	r22, 0x0A	; 10
    1412:	62 9f       	mul	r22, r18
    1414:	a0 01       	movw	r20, r0
    1416:	63 9f       	mul	r22, r19
    1418:	50 0d       	add	r21, r0
    141a:	11 24       	eor	r1, r1
    141c:	14 96       	adiw	r26, 0x04	; 4
    141e:	cc 90       	ld	r12, X
    1420:	0c 2c       	mov	r0, r12
    1422:	00 0c       	add	r0, r0
    1424:	dd 08       	sbc	r13, r13
    1426:	b0 e3       	ldi	r27, 0x30	; 48
    1428:	cb 1a       	sub	r12, r27
    142a:	d1 08       	sbc	r13, r1
    142c:	c4 0e       	add	r12, r20
    142e:	d5 1e       	adc	r13, r21
    1430:	86 01       	movw	r16, r12
    1432:	01 50       	subi	r16, 0x01	; 1
    1434:	11 09       	sbc	r17, r1
    1436:	fc 01       	movw	r30, r24
    1438:	26 81       	ldd	r18, Z+6	; 0x06
    143a:	02 2e       	mov	r0, r18
    143c:	00 0c       	add	r0, r0
    143e:	33 0b       	sbc	r19, r19
    1440:	20 53       	subi	r18, 0x30	; 48
    1442:	31 09       	sbc	r19, r1
    1444:	e8 ee       	ldi	r30, 0xE8	; 232
    1446:	f3 e0       	ldi	r31, 0x03	; 3
    1448:	2e 9f       	mul	r18, r30
    144a:	a0 01       	movw	r20, r0
    144c:	2f 9f       	mul	r18, r31
    144e:	50 0d       	add	r21, r0
    1450:	3e 9f       	mul	r19, r30
    1452:	50 0d       	add	r21, r0
    1454:	11 24       	eor	r1, r1
    1456:	dc 01       	movw	r26, r24
    1458:	17 96       	adiw	r26, 0x07	; 7
    145a:	2c 91       	ld	r18, X
    145c:	17 97       	sbiw	r26, 0x07	; 7
    145e:	02 2e       	mov	r0, r18
    1460:	00 0c       	add	r0, r0
    1462:	33 0b       	sbc	r19, r19
    1464:	20 53       	subi	r18, 0x30	; 48
    1466:	31 09       	sbc	r19, r1
    1468:	74 e6       	ldi	r23, 0x64	; 100
    146a:	72 9f       	mul	r23, r18
    146c:	70 01       	movw	r14, r0
    146e:	73 9f       	mul	r23, r19
    1470:	f0 0c       	add	r15, r0
    1472:	11 24       	eor	r1, r1
    1474:	e4 0e       	add	r14, r20
    1476:	f5 1e       	adc	r15, r21
    1478:	18 96       	adiw	r26, 0x08	; 8
    147a:	4c 91       	ld	r20, X
    147c:	18 97       	sbiw	r26, 0x08	; 8
    147e:	04 2e       	mov	r0, r20
    1480:	00 0c       	add	r0, r0
    1482:	55 0b       	sbc	r21, r21
    1484:	40 53       	subi	r20, 0x30	; 48
    1486:	51 09       	sbc	r21, r1
    1488:	64 9f       	mul	r22, r20
    148a:	90 01       	movw	r18, r0
    148c:	65 9f       	mul	r22, r21
    148e:	30 0d       	add	r19, r0
    1490:	11 24       	eor	r1, r1
    1492:	e2 0e       	add	r14, r18
    1494:	f3 1e       	adc	r15, r19
    1496:	19 96       	adiw	r26, 0x09	; 9
    1498:	2c 91       	ld	r18, X
    149a:	19 97       	sbiw	r26, 0x09	; 9
    149c:	f7 01       	movw	r30, r14
    149e:	e2 0f       	add	r30, r18
    14a0:	f1 1d       	adc	r31, r1
    14a2:	27 fd       	sbrc	r18, 7
    14a4:	fa 95       	dec	r31
    14a6:	af 01       	movw	r20, r30
    14a8:	58 50       	subi	r21, 0x08	; 8
    14aa:	7a 01       	movw	r14, r20
    14ac:	1b 96       	adiw	r26, 0x0b	; 11
    14ae:	2c 91       	ld	r18, X
    14b0:	1b 97       	sbiw	r26, 0x0b	; 11
    14b2:	22 0f       	add	r18, r18
    14b4:	20 56       	subi	r18, 0x60	; 96
    14b6:	32 2f       	mov	r19, r18
    14b8:	33 0f       	add	r19, r19
    14ba:	33 0f       	add	r19, r19
    14bc:	23 0f       	add	r18, r19
    14be:	1c 96       	adiw	r26, 0x0c	; 12
    14c0:	3c 91       	ld	r19, X
    14c2:	1c 97       	sbiw	r26, 0x0c	; 12
    14c4:	30 53       	subi	r19, 0x30	; 48
    14c6:	23 0f       	add	r18, r19
    14c8:	29 8b       	std	Y+17, r18	; 0x11
    14ca:	1e 96       	adiw	r26, 0x0e	; 14
    14cc:	2c 91       	ld	r18, X
    14ce:	1e 97       	sbiw	r26, 0x0e	; 14
    14d0:	22 0f       	add	r18, r18
    14d2:	20 56       	subi	r18, 0x60	; 96
    14d4:	32 2f       	mov	r19, r18
    14d6:	33 0f       	add	r19, r19
    14d8:	33 0f       	add	r19, r19
    14da:	23 0f       	add	r18, r19
    14dc:	1f 96       	adiw	r26, 0x0f	; 15
    14de:	3c 91       	ld	r19, X
    14e0:	1f 97       	sbiw	r26, 0x0f	; 15
    14e2:	30 53       	subi	r19, 0x30	; 48
    14e4:	23 0f       	add	r18, r19
    14e6:	2a 8b       	std	Y+18, r18	; 0x12
    14e8:	51 96       	adiw	r26, 0x11	; 17
    14ea:	2c 91       	ld	r18, X
    14ec:	51 97       	sbiw	r26, 0x11	; 17
    14ee:	22 0f       	add	r18, r18
    14f0:	20 56       	subi	r18, 0x60	; 96
    14f2:	32 2f       	mov	r19, r18
    14f4:	33 0f       	add	r19, r19
    14f6:	33 0f       	add	r19, r19
    14f8:	23 0f       	add	r18, r19
    14fa:	52 96       	adiw	r26, 0x12	; 18
    14fc:	8c 91       	ld	r24, X
    14fe:	80 53       	subi	r24, 0x30	; 48
    1500:	28 0f       	add	r18, r24
    1502:	2b 8b       	std	Y+19, r18	; 0x13
    1504:	ca 01       	movw	r24, r20
    1506:	0e 94 b2 09 	call	0x1364	; 0x1364 <is_leapyear>
    150a:	88 23       	and	r24, r24
    150c:	21 f0       	breq	.+8      	; 0x1516 <rtc_set_by_datestr+0x17e>
    150e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1510:	52 30       	cpi	r21, 0x02	; 2
    1512:	08 f0       	brcs	.+2      	; 0x1516 <rtc_set_by_datestr+0x17e>
    1514:	86 01       	movw	r16, r12
    1516:	c7 01       	movw	r24, r14
    1518:	60 e9       	ldi	r22, 0x90	; 144
    151a:	71 e0       	ldi	r23, 0x01	; 1
    151c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodhi4>
    1520:	fc 01       	movw	r30, r24
    1522:	db 01       	movw	r26, r22
    1524:	20 e8       	ldi	r18, 0x80	; 128
    1526:	39 e5       	ldi	r19, 0x59	; 89
    1528:	40 e6       	ldi	r20, 0x60	; 96
    152a:	50 ef       	ldi	r21, 0xF0	; 240
    152c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    1530:	2b 01       	movw	r4, r22
    1532:	3c 01       	movw	r6, r24
    1534:	cf 01       	movw	r24, r30
    1536:	64 e6       	ldi	r22, 0x64	; 100
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodhi4>
    153e:	fc 01       	movw	r30, r24
    1540:	db 01       	movw	r26, r22
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	32 ec       	ldi	r19, 0xC2	; 194
    1546:	47 e1       	ldi	r20, 0x17	; 23
    1548:	5c eb       	ldi	r21, 0xBC	; 188
    154a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    154e:	4b 01       	movw	r8, r22
    1550:	5c 01       	movw	r10, r24
    1552:	df 01       	movw	r26, r30
    1554:	b6 95       	lsr	r27
    1556:	a7 95       	ror	r26
    1558:	b6 95       	lsr	r27
    155a:	a7 95       	ror	r26
    155c:	20 e8       	ldi	r18, 0x80	; 128
    155e:	3f e1       	ldi	r19, 0x1F	; 31
    1560:	46 e8       	ldi	r20, 0x86	; 134
    1562:	57 e0       	ldi	r21, 0x07	; 7
    1564:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    1568:	6b 01       	movw	r12, r22
    156a:	7c 01       	movw	r14, r24
    156c:	df 01       	movw	r26, r30
    156e:	a3 70       	andi	r26, 0x03	; 3
    1570:	bb 27       	eor	r27, r27
    1572:	20 e8       	ldi	r18, 0x80	; 128
    1574:	33 e3       	ldi	r19, 0x33	; 51
    1576:	41 ee       	ldi	r20, 0xE1	; 225
    1578:	51 e0       	ldi	r21, 0x01	; 1
    157a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    157e:	6c 8b       	std	Y+20, r22	; 0x14
    1580:	7d 8b       	std	Y+21, r23	; 0x15
    1582:	8e 8b       	std	Y+22, r24	; 0x16
    1584:	9f 8b       	std	Y+23, r25	; 0x17
    1586:	f1 01       	movw	r30, r2
    1588:	8e 2f       	mov	r24, r30
    158a:	82 19       	sub	r24, r2
    158c:	9d 85       	ldd	r25, Y+13	; 0x0d
    158e:	89 17       	cp	r24, r25
    1590:	20 f4       	brcc	.+8      	; 0x159a <rtc_set_by_datestr+0x202>
    1592:	81 91       	ld	r24, Z+
    1594:	08 0f       	add	r16, r24
    1596:	11 1d       	adc	r17, r1
    1598:	f7 cf       	rjmp	.-18     	; 0x1588 <rtc_set_by_datestr+0x1f0>
    159a:	a9 89       	ldd	r26, Y+17	; 0x11
    159c:	2a 2f       	mov	r18, r26
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	a0 e1       	ldi	r26, 0x10	; 16
    15a2:	be e0       	ldi	r27, 0x0E	; 14
    15a4:	0e 94 75 16 	call	0x2cea	; 0x2cea <__umulhisi3>
    15a8:	6d 87       	std	Y+13, r22	; 0x0d
    15aa:	7e 87       	std	Y+14, r23	; 0x0e
    15ac:	8f 87       	std	Y+15, r24	; 0x0f
    15ae:	98 8b       	std	Y+16, r25	; 0x10
    15b0:	ba 89       	ldd	r27, Y+18	; 0x12
    15b2:	2b 2f       	mov	r18, r27
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	ac e3       	ldi	r26, 0x3C	; 60
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	0e 94 75 16 	call	0x2cea	; 0x2cea <__umulhisi3>
    15be:	2d 85       	ldd	r18, Y+13	; 0x0d
    15c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    15c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    15c4:	58 89       	ldd	r21, Y+16	; 0x10
    15c6:	26 0f       	add	r18, r22
    15c8:	37 1f       	adc	r19, r23
    15ca:	48 1f       	adc	r20, r24
    15cc:	59 1f       	adc	r21, r25
    15ce:	da 01       	movw	r26, r20
    15d0:	c9 01       	movw	r24, r18
    15d2:	3b 89       	ldd	r19, Y+19	; 0x13
    15d4:	83 0f       	add	r24, r19
    15d6:	91 1d       	adc	r25, r1
    15d8:	a1 1d       	adc	r26, r1
    15da:	b1 1d       	adc	r27, r1
    15dc:	48 0e       	add	r4, r24
    15de:	59 1e       	adc	r5, r25
    15e0:	6a 1e       	adc	r6, r26
    15e2:	7b 1e       	adc	r7, r27
    15e4:	84 0c       	add	r8, r4
    15e6:	95 1c       	adc	r9, r5
    15e8:	a6 1c       	adc	r10, r6
    15ea:	b7 1c       	adc	r11, r7
    15ec:	c8 0c       	add	r12, r8
    15ee:	d9 1c       	adc	r13, r9
    15f0:	ea 1c       	adc	r14, r10
    15f2:	fb 1c       	adc	r15, r11
    15f4:	8c 89       	ldd	r24, Y+20	; 0x14
    15f6:	9d 89       	ldd	r25, Y+21	; 0x15
    15f8:	ae 89       	ldd	r26, Y+22	; 0x16
    15fa:	bf 89       	ldd	r27, Y+23	; 0x17
    15fc:	c8 0e       	add	r12, r24
    15fe:	d9 1e       	adc	r13, r25
    1600:	ea 1e       	adc	r14, r26
    1602:	fb 1e       	adc	r15, r27
    1604:	d8 01       	movw	r26, r16
    1606:	20 e8       	ldi	r18, 0x80	; 128
    1608:	31 e5       	ldi	r19, 0x51	; 81
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8c 0d       	add	r24, r12
    1618:	9d 1d       	adc	r25, r13
    161a:	ae 1d       	adc	r26, r14
    161c:	bf 1d       	adc	r27, r15
    161e:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <rtc_base>
    1622:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <rtc_base+0x1>
    1626:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <rtc_base+0x2>
    162a:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <rtc_base+0x3>
    162e:	67 96       	adiw	r28, 0x17	; 23
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	bf 90       	pop	r11
    164c:	af 90       	pop	r10
    164e:	9f 90       	pop	r9
    1650:	8f 90       	pop	r8
    1652:	7f 90       	pop	r7
    1654:	6f 90       	pop	r6
    1656:	5f 90       	pop	r5
    1658:	4f 90       	pop	r4
    165a:	3f 90       	pop	r3
    165c:	2f 90       	pop	r2
    165e:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <timer1_clear>

00001662 <get_month>:
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	68 97       	sbiw	r28, 0x18	; 24
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	7b 01       	movw	r14, r22
    1680:	2c e0       	ldi	r18, 0x0C	; 12
    1682:	e7 e9       	ldi	r30, 0x97	; 151
    1684:	f1 e0       	ldi	r31, 0x01	; 1
    1686:	de 01       	movw	r26, r28
    1688:	1d 96       	adiw	r26, 0x0d	; 13
    168a:	01 90       	ld	r0, Z+
    168c:	0d 92       	st	X+, r0
    168e:	2a 95       	dec	r18
    1690:	e1 f7       	brne	.-8      	; 0x168a <get_month+0x28>
    1692:	8e 01       	movw	r16, r28
    1694:	0f 5f       	subi	r16, 0xFF	; 255
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	2c e0       	ldi	r18, 0x0C	; 12
    169a:	f8 01       	movw	r30, r16
    169c:	11 92       	st	Z+, r1
    169e:	2a 95       	dec	r18
    16a0:	e9 f7       	brne	.-6      	; 0x169c <get_month+0x3a>
    16a2:	0e 94 b2 09 	call	0x1364	; 0x1364 <is_leapyear>
    16a6:	8a 83       	std	Y+2, r24	; 0x02
    16a8:	de 01       	movw	r26, r28
    16aa:	1d 96       	adiw	r26, 0x0d	; 13
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	f7 01       	movw	r30, r14
    16b0:	40 81       	ld	r20, Z
    16b2:	51 81       	ldd	r21, Z+1	; 0x01
    16b4:	9d 91       	ld	r25, X+
    16b6:	f8 01       	movw	r30, r16
    16b8:	21 91       	ld	r18, Z+
    16ba:	8f 01       	movw	r16, r30
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	29 0f       	add	r18, r25
    16c0:	31 1d       	adc	r19, r1
    16c2:	42 17       	cp	r20, r18
    16c4:	53 07       	cpc	r21, r19
    16c6:	40 f0       	brcs	.+16     	; 0x16d8 <get_month+0x76>
    16c8:	42 1b       	sub	r20, r18
    16ca:	53 0b       	sbc	r21, r19
    16cc:	f7 01       	movw	r30, r14
    16ce:	51 83       	std	Z+1, r21	; 0x01
    16d0:	40 83       	st	Z, r20
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	8c 30       	cpi	r24, 0x0C	; 12
    16d6:	59 f7       	brne	.-42     	; 0x16ae <get_month+0x4c>
    16d8:	68 96       	adiw	r28, 0x18	; 24
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	ef 90       	pop	r14
    16f0:	08 95       	ret

000016f2 <rtc_num2datestr>:
    16f2:	4f 92       	push	r4
    16f4:	5f 92       	push	r5
    16f6:	6f 92       	push	r6
    16f8:	7f 92       	push	r7
    16fa:	8f 92       	push	r8
    16fc:	9f 92       	push	r9
    16fe:	af 92       	push	r10
    1700:	bf 92       	push	r11
    1702:	cf 92       	push	r12
    1704:	df 92       	push	r13
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	00 d0       	rcall	.+0      	; 0x1710 <rtc_num2datestr+0x1e>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	2b 01       	movw	r4, r22
    1716:	3c 01       	movw	r6, r24
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a0 e0       	ldi	r26, 0x00	; 0
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	20 e8       	ldi	r18, 0x80	; 128
    1722:	42 16       	cp	r4, r18
    1724:	29 e5       	ldi	r18, 0x59	; 89
    1726:	52 06       	cpc	r5, r18
    1728:	20 e6       	ldi	r18, 0x60	; 96
    172a:	62 06       	cpc	r6, r18
    172c:	20 ef       	ldi	r18, 0xF0	; 240
    172e:	72 06       	cpc	r7, r18
    1730:	18 f4       	brcc	.+6      	; 0x1738 <rtc_num2datestr+0x46>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	dc 01       	movw	r26, r24
    1738:	20 e9       	ldi	r18, 0x90	; 144
    173a:	31 e0       	ldi	r19, 0x01	; 1
    173c:	82 9f       	mul	r24, r18
    173e:	50 01       	movw	r10, r0
    1740:	83 9f       	mul	r24, r19
    1742:	b0 0c       	add	r11, r0
    1744:	92 9f       	mul	r25, r18
    1746:	b0 0c       	add	r11, r0
    1748:	11 24       	eor	r1, r1
    174a:	80 e3       	ldi	r24, 0x30	; 48
    174c:	a8 1a       	sub	r10, r24
    174e:	88 ef       	ldi	r24, 0xF8	; 248
    1750:	b8 0a       	sbc	r11, r24
    1752:	c1 2c       	mov	r12, r1
    1754:	d1 2c       	mov	r13, r1
    1756:	76 01       	movw	r14, r12
    1758:	c3 94       	inc	r12
    175a:	20 e8       	ldi	r18, 0x80	; 128
    175c:	42 16       	cp	r4, r18
    175e:	29 e5       	ldi	r18, 0x59	; 89
    1760:	52 06       	cpc	r5, r18
    1762:	20 e6       	ldi	r18, 0x60	; 96
    1764:	62 06       	cpc	r6, r18
    1766:	20 ef       	ldi	r18, 0xF0	; 240
    1768:	72 06       	cpc	r7, r18
    176a:	18 f4       	brcc	.+6      	; 0x1772 <rtc_num2datestr+0x80>
    176c:	c1 2c       	mov	r12, r1
    176e:	d1 2c       	mov	r13, r1
    1770:	76 01       	movw	r14, r12
    1772:	a7 01       	movw	r20, r14
    1774:	96 01       	movw	r18, r12
    1776:	60 e8       	ldi	r22, 0x80	; 128
    1778:	79 e5       	ldi	r23, 0x59	; 89
    177a:	80 e6       	ldi	r24, 0x60	; 96
    177c:	90 ef       	ldi	r25, 0xF0	; 240
    177e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__mulsi3>
    1782:	73 01       	movw	r14, r6
    1784:	62 01       	movw	r12, r4
    1786:	c6 1a       	sub	r12, r22
    1788:	d7 0a       	sbc	r13, r23
    178a:	e8 0a       	sbc	r14, r24
    178c:	f9 0a       	sbc	r15, r25
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e0       	ldi	r26, 0x00	; 0
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	c1 14       	cp	r12, r1
    1798:	22 ec       	ldi	r18, 0xC2	; 194
    179a:	d2 06       	cpc	r13, r18
    179c:	27 e1       	ldi	r18, 0x17	; 23
    179e:	e2 06       	cpc	r14, r18
    17a0:	2c eb       	ldi	r18, 0xBC	; 188
    17a2:	f2 06       	cpc	r15, r18
    17a4:	18 f4       	brcc	.+6      	; 0x17ac <rtc_num2datestr+0xba>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	dc 01       	movw	r26, r24
    17ac:	44 e6       	ldi	r20, 0x64	; 100
    17ae:	48 9f       	mul	r20, r24
    17b0:	90 01       	movw	r18, r0
    17b2:	49 9f       	mul	r20, r25
    17b4:	30 0d       	add	r19, r0
    17b6:	11 24       	eor	r1, r1
    17b8:	a2 0e       	add	r10, r18
    17ba:	b3 1e       	adc	r11, r19
    17bc:	21 e0       	ldi	r18, 0x01	; 1
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	c1 14       	cp	r12, r1
    17c6:	82 ec       	ldi	r24, 0xC2	; 194
    17c8:	d8 06       	cpc	r13, r24
    17ca:	87 e1       	ldi	r24, 0x17	; 23
    17cc:	e8 06       	cpc	r14, r24
    17ce:	8c eb       	ldi	r24, 0xBC	; 188
    17d0:	f8 06       	cpc	r15, r24
    17d2:	18 f4       	brcc	.+6      	; 0x17da <rtc_num2datestr+0xe8>
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	a9 01       	movw	r20, r18
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	72 ec       	ldi	r23, 0xC2	; 194
    17de:	87 e1       	ldi	r24, 0x17	; 23
    17e0:	9c eb       	ldi	r25, 0xBC	; 188
    17e2:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__mulsi3>
    17e6:	a7 01       	movw	r20, r14
    17e8:	96 01       	movw	r18, r12
    17ea:	26 1b       	sub	r18, r22
    17ec:	37 0b       	sbc	r19, r23
    17ee:	48 0b       	sbc	r20, r24
    17f0:	59 0b       	sbc	r21, r25
    17f2:	ca 01       	movw	r24, r20
    17f4:	b9 01       	movw	r22, r18
    17f6:	20 e8       	ldi	r18, 0x80	; 128
    17f8:	3f e1       	ldi	r19, 0x1F	; 31
    17fa:	46 e8       	ldi	r20, 0x86	; 134
    17fc:	57 e0       	ldi	r21, 0x07	; 7
    17fe:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__udivmodsi4>
    1802:	22 0f       	add	r18, r18
    1804:	33 1f       	adc	r19, r19
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	a2 0e       	add	r10, r18
    180c:	b3 1e       	adc	r11, r19
    180e:	20 e8       	ldi	r18, 0x80	; 128
    1810:	33 e3       	ldi	r19, 0x33	; 51
    1812:	41 ee       	ldi	r20, 0xE1	; 225
    1814:	51 e0       	ldi	r21, 0x01	; 1
    1816:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__udivmodsi4>
    181a:	75 01       	movw	r14, r10
    181c:	e2 0e       	add	r14, r18
    181e:	f3 1e       	adc	r15, r19
    1820:	20 e8       	ldi	r18, 0x80	; 128
    1822:	31 e5       	ldi	r19, 0x51	; 81
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	50 e0       	ldi	r21, 0x00	; 0
    1828:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__udivmodsi4>
    182c:	4b 01       	movw	r8, r22
    182e:	5c 01       	movw	r10, r24
    1830:	3a 83       	std	Y+2, r19	; 0x02
    1832:	29 83       	std	Y+1, r18	; 0x01
    1834:	be 01       	movw	r22, r28
    1836:	6f 5f       	subi	r22, 0xFF	; 255
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	c7 01       	movw	r24, r14
    183c:	0e 94 31 0b 	call	0x1662	; 0x1662 <get_month>
    1840:	d8 2e       	mov	r13, r24
    1842:	c5 01       	movw	r24, r10
    1844:	b4 01       	movw	r22, r8
    1846:	20 e1       	ldi	r18, 0x10	; 16
    1848:	3e e0       	ldi	r19, 0x0E	; 14
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__udivmodsi4>
    1852:	29 01       	movw	r4, r18
    1854:	3a 01       	movw	r6, r20
    1856:	4b 01       	movw	r8, r22
    1858:	5c 01       	movw	r10, r24
    185a:	64 ee       	ldi	r22, 0xE4	; 228
    185c:	71 e0       	ldi	r23, 0x01	; 1
    185e:	84 e1       	ldi	r24, 0x14	; 20
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	0e 94 bd 0c 	call	0x197a	; 0x197a <str_cpy>
    1866:	6d 2d       	mov	r22, r13
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	6f 5f       	subi	r22, 0xFF	; 255
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	42 e0       	ldi	r20, 0x02	; 2
    1870:	84 e1       	ldi	r24, 0x14	; 20
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <str_writeudec16>
    1878:	69 81       	ldd	r22, Y+1	; 0x01
    187a:	7a 81       	ldd	r23, Y+2	; 0x02
    187c:	6f 5f       	subi	r22, 0xFF	; 255
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	42 e0       	ldi	r20, 0x02	; 2
    1882:	87 e1       	ldi	r24, 0x17	; 23
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <str_writeudec16>
    188a:	44 e0       	ldi	r20, 0x04	; 4
    188c:	b7 01       	movw	r22, r14
    188e:	8a e1       	ldi	r24, 0x1A	; 26
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <str_writeudec16>
    1896:	42 e0       	ldi	r20, 0x02	; 2
    1898:	b2 01       	movw	r22, r4
    189a:	8f e1       	ldi	r24, 0x1F	; 31
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <str_writeudec16>
    18a2:	c5 01       	movw	r24, r10
    18a4:	b4 01       	movw	r22, r8
    18a6:	2c e3       	ldi	r18, 0x3C	; 60
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__udivmodsi4>
    18b2:	49 01       	movw	r8, r18
    18b4:	5a 01       	movw	r10, r20
    18b6:	6b 01       	movw	r12, r22
    18b8:	7c 01       	movw	r14, r24
    18ba:	42 e0       	ldi	r20, 0x02	; 2
    18bc:	b4 01       	movw	r22, r8
    18be:	82 e2       	ldi	r24, 0x22	; 34
    18c0:	91 e0       	ldi	r25, 0x01	; 1
    18c2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <str_writeudec16>
    18c6:	42 e0       	ldi	r20, 0x02	; 2
    18c8:	b6 01       	movw	r22, r12
    18ca:	85 e2       	ldi	r24, 0x25	; 37
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <str_writeudec16>
    18d2:	84 e1       	ldi	r24, 0x14	; 20
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	df 90       	pop	r13
    18e4:	cf 90       	pop	r12
    18e6:	bf 90       	pop	r11
    18e8:	af 90       	pop	r10
    18ea:	9f 90       	pop	r9
    18ec:	8f 90       	pop	r8
    18ee:	7f 90       	pop	r7
    18f0:	6f 90       	pop	r6
    18f2:	5f 90       	pop	r5
    18f4:	4f 90       	pop	r4
    18f6:	08 95       	ret

000018f8 <rtc_get_date_string>:
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <timer1_get>
    1900:	00 91 f9 04 	lds	r16, 0x04F9	; 0x8004f9 <rtc_base>
    1904:	10 91 fa 04 	lds	r17, 0x04FA	; 0x8004fa <rtc_base+0x1>
    1908:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <rtc_base+0x2>
    190c:	30 91 fc 04 	lds	r19, 0x04FC	; 0x8004fc <rtc_base+0x3>
    1910:	60 0f       	add	r22, r16
    1912:	71 1f       	adc	r23, r17
    1914:	82 1f       	adc	r24, r18
    1916:	93 1f       	adc	r25, r19
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <rtc_num2datestr>

00001920 <mem_cpy>:
    1920:	fb 01       	movw	r30, r22
    1922:	48 0f       	add	r20, r24
    1924:	59 1f       	adc	r21, r25
    1926:	84 17       	cp	r24, r20
    1928:	95 07       	cpc	r25, r21
    192a:	29 f0       	breq	.+10     	; 0x1936 <mem_cpy+0x16>
    192c:	21 91       	ld	r18, Z+
    192e:	dc 01       	movw	r26, r24
    1930:	2d 93       	st	X+, r18
    1932:	cd 01       	movw	r24, r26
    1934:	f8 cf       	rjmp	.-16     	; 0x1926 <mem_cpy+0x6>
    1936:	08 95       	ret

00001938 <mem_set>:
    1938:	48 0f       	add	r20, r24
    193a:	59 1f       	adc	r21, r25
    193c:	84 17       	cp	r24, r20
    193e:	95 07       	cpc	r25, r21
    1940:	21 f0       	breq	.+8      	; 0x194a <mem_set+0x12>
    1942:	fc 01       	movw	r30, r24
    1944:	61 93       	st	Z+, r22
    1946:	cf 01       	movw	r24, r30
    1948:	f9 cf       	rjmp	.-14     	; 0x193c <mem_set+0x4>
    194a:	08 95       	ret

0000194c <mem_cmp>:
    194c:	fb 01       	movw	r30, r22
    194e:	48 0f       	add	r20, r24
    1950:	59 1f       	adc	r21, r25
    1952:	84 17       	cp	r24, r20
    1954:	95 07       	cpc	r25, r21
    1956:	59 f0       	breq	.+22     	; 0x196e <mem_cmp+0x22>
    1958:	dc 01       	movw	r26, r24
    195a:	3d 91       	ld	r19, X+
    195c:	cd 01       	movw	r24, r26
    195e:	21 91       	ld	r18, Z+
    1960:	32 17       	cp	r19, r18
    1962:	40 f0       	brcs	.+16     	; 0x1974 <mem_cmp+0x28>
    1964:	23 17       	cp	r18, r19
    1966:	a8 f7       	brcc	.-22     	; 0x1952 <mem_cmp+0x6>
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	08 95       	ret
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	08 95       	ret
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	9f ef       	ldi	r25, 0xFF	; 255
    1978:	08 95       	ret

0000197a <str_cpy>:
    197a:	fc 01       	movw	r30, r24
    197c:	db 01       	movw	r26, r22
    197e:	8d 91       	ld	r24, X+
    1980:	bd 01       	movw	r22, r26
    1982:	88 23       	and	r24, r24
    1984:	11 f0       	breq	.+4      	; 0x198a <str_cpy+0x10>
    1986:	81 93       	st	Z+, r24
    1988:	f9 cf       	rjmp	.-14     	; 0x197c <str_cpy+0x2>
    198a:	10 82       	st	Z, r1
    198c:	08 95       	ret

0000198e <str_len>:
    198e:	fc 01       	movw	r30, r24
    1990:	9f 01       	movw	r18, r30
    1992:	28 1b       	sub	r18, r24
    1994:	39 0b       	sbc	r19, r25
    1996:	41 91       	ld	r20, Z+
    1998:	41 11       	cpse	r20, r1
    199a:	fa cf       	rjmp	.-12     	; 0x1990 <str_len+0x2>
    199c:	c9 01       	movw	r24, r18
    199e:	08 95       	ret

000019a0 <str_writeudec16>:
    19a0:	9f 92       	push	r9
    19a2:	af 92       	push	r10
    19a4:	bf 92       	push	r11
    19a6:	cf 92       	push	r12
    19a8:	df 92       	push	r13
    19aa:	ef 92       	push	r14
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <str_writeudec16+0x18>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <str_writeudec16+0x1a>
    19ba:	1f 92       	push	r1
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	fc 01       	movw	r30, r24
    19c2:	6b 01       	movw	r12, r22
    19c4:	9e 01       	movw	r18, r28
    19c6:	2f 5f       	subi	r18, 0xFF	; 255
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	8e 01       	movw	r16, r28
    19cc:	0a 5f       	subi	r16, 0xFA	; 250
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	ee 24       	eor	r14, r14
    19d2:	e3 94       	inc	r14
    19d4:	f1 2c       	mov	r15, r1
    19d6:	9a e0       	ldi	r25, 0x0A	; 10
    19d8:	99 2e       	mov	r9, r25
    19da:	9e 9c       	mul	r9, r14
    19dc:	50 01       	movw	r10, r0
    19de:	9f 9c       	mul	r9, r15
    19e0:	b0 0c       	add	r11, r0
    19e2:	11 24       	eor	r1, r1
    19e4:	c6 01       	movw	r24, r12
    19e6:	b5 01       	movw	r22, r10
    19e8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodhi4>
    19ec:	b7 01       	movw	r22, r14
    19ee:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodhi4>
    19f2:	d9 01       	movw	r26, r18
    19f4:	6d 93       	st	X+, r22
    19f6:	9d 01       	movw	r18, r26
    19f8:	c6 1a       	sub	r12, r22
    19fa:	d1 08       	sbc	r13, r1
    19fc:	67 fd       	sbrc	r22, 7
    19fe:	d3 94       	inc	r13
    1a00:	75 01       	movw	r14, r10
    1a02:	a0 17       	cp	r26, r16
    1a04:	b1 07       	cpc	r27, r17
    1a06:	49 f7       	brne	.-46     	; 0x19da <str_writeudec16+0x3a>
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	84 e0       	ldi	r24, 0x04	; 4
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	d8 01       	movw	r26, r16
    1a14:	2e 91       	ld	r18, -X
    1a16:	8d 01       	movw	r16, r26
    1a18:	21 11       	cpse	r18, r1
    1a1a:	05 c0       	rjmp	.+10     	; 0x1a26 <str_writeudec16+0x86>
    1a1c:	61 15       	cp	r22, r1
    1a1e:	71 05       	cpc	r23, r1
    1a20:	11 f4       	brne	.+4      	; 0x1a26 <str_writeudec16+0x86>
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	41 f4       	brne	.+16     	; 0x1a36 <str_writeudec16+0x96>
    1a26:	84 17       	cp	r24, r20
    1a28:	95 07       	cpc	r25, r21
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <str_writeudec16+0x96>
    1a2c:	20 5d       	subi	r18, 0xD0	; 208
    1a2e:	21 93       	st	Z+, r18
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <str_writeudec16+0x9e>
    1a36:	84 17       	cp	r24, r20
    1a38:	95 07       	cpc	r25, r21
    1a3a:	0c f4       	brge	.+2      	; 0x1a3e <str_writeudec16+0x9e>
    1a3c:	31 96       	adiw	r30, 0x01	; 1
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	40 f7       	brcc	.-48     	; 0x1a12 <str_writeudec16+0x72>
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	ff 90       	pop	r15
    1a56:	ef 90       	pop	r14
    1a58:	df 90       	pop	r13
    1a5a:	cf 90       	pop	r12
    1a5c:	bf 90       	pop	r11
    1a5e:	af 90       	pop	r10
    1a60:	9f 90       	pop	r9
    1a62:	08 95       	ret

00001a64 <temp_init>:
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1a6a:	86 e8       	ldi	r24, 0x86	; 134
    1a6c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1a70:	08 95       	ret

00001a72 <temp_is_data_ready>:
    1a72:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1a76:	82 95       	swap	r24
    1a78:	86 95       	lsr	r24
    1a7a:	86 95       	lsr	r24
    1a7c:	83 70       	andi	r24, 0x03	; 3
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	89 27       	eor	r24, r25
    1a82:	81 70       	andi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	08 95       	ret

00001a88 <temp_start>:
    1a88:	ea e7       	ldi	r30, 0x7A	; 122
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 64       	ori	r24, 0x40	; 64
    1a90:	80 83       	st	Z, r24
    1a92:	08 95       	ret

00001a94 <temp_get>:
    1a94:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1a98:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	32 2f       	mov	r19, r18
    1aa0:	22 27       	eor	r18, r18
    1aa2:	a9 01       	movw	r20, r18
    1aa4:	33 0f       	add	r19, r19
    1aa6:	66 0b       	sbc	r22, r22
    1aa8:	77 0b       	sbc	r23, r23
    1aaa:	9a 01       	movw	r18, r20
    1aac:	ab 01       	movw	r20, r22
    1aae:	28 2b       	or	r18, r24
    1ab0:	a5 e6       	ldi	r26, 0x65	; 101
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    1ab8:	24 e6       	ldi	r18, 0x64	; 100
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__divmodsi4>
    1ac4:	da 01       	movw	r26, r20
    1ac6:	c9 01       	movw	r24, r18
    1ac8:	81 51       	subi	r24, 0x11	; 17
    1aca:	91 40       	sbci	r25, 0x01	; 1
    1acc:	a1 09       	sbc	r26, r1
    1ace:	b1 09       	sbc	r27, r1
    1ad0:	08 95       	ret

00001ad2 <__vector_11>:
    1ad2:	1f 92       	push	r1
    1ad4:	0f 92       	push	r0
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	0f 92       	push	r0
    1ada:	11 24       	eor	r1, r1
    1adc:	8f 93       	push	r24
    1ade:	9f 93       	push	r25
    1ae0:	af 93       	push	r26
    1ae2:	bf 93       	push	r27
    1ae4:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <timer1_count>
    1ae8:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <timer1_count+0x1>
    1aec:	a0 91 51 04 	lds	r26, 0x0451	; 0x800451 <timer1_count+0x2>
    1af0:	b0 91 52 04 	lds	r27, 0x0452	; 0x800452 <timer1_count+0x3>
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	a1 1d       	adc	r26, r1
    1af8:	b1 1d       	adc	r27, r1
    1afa:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <timer1_count>
    1afe:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <timer1_count+0x1>
    1b02:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <timer1_count+0x2>
    1b06:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <timer1_count+0x3>
    1b0a:	bf 91       	pop	r27
    1b0c:	af 91       	pop	r26
    1b0e:	9f 91       	pop	r25
    1b10:	8f 91       	pop	r24
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0
    1b18:	1f 90       	pop	r1
    1b1a:	18 95       	reti

00001b1c <timer1_init>:
    1b1c:	83 e2       	ldi	r24, 0x23	; 35
    1b1e:	94 ef       	ldi	r25, 0xF4	; 244
    1b20:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b24:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b28:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b2c:	8c e0       	ldi	r24, 0x0C	; 12
    1b2e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b32:	78 94       	sei
    1b34:	82 e0       	ldi	r24, 0x02	; 2
    1b36:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b3a:	08 95       	ret

00001b3c <timer1_get>:
    1b3c:	2f b7       	in	r18, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	60 91 4f 04 	lds	r22, 0x044F	; 0x80044f <timer1_count>
    1b44:	70 91 50 04 	lds	r23, 0x0450	; 0x800450 <timer1_count+0x1>
    1b48:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <timer1_count+0x2>
    1b4c:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <timer1_count+0x3>
    1b50:	2f bf       	out	0x3f, r18	; 63
    1b52:	08 95       	ret

00001b54 <timer1_clear>:
    1b54:	8f b7       	in	r24, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <timer1_count>
    1b5c:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <timer1_count+0x1>
    1b60:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <timer1_count+0x2>
    1b64:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <timer1_count+0x3>
    1b68:	8f bf       	out	0x3f, r24	; 63
    1b6a:	08 95       	ret

00001b6c <uart_init>:
    1b6c:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <serial_init>
    1b70:	78 94       	sei
    1b72:	08 95       	ret

00001b74 <uart_writechar>:
    1b74:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <serial_writechar>

00001b78 <uart_writestr>:
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	ec 01       	movw	r28, r24
    1b7e:	89 91       	ld	r24, Y+
    1b80:	88 23       	and	r24, r24
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <uart_writestr+0x12>
    1b84:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <serial_writechar>
    1b88:	fa cf       	rjmp	.-12     	; 0x1b7e <uart_writestr+0x6>
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <uart_writehex8>:
    1b90:	cf 93       	push	r28
    1b92:	c8 2f       	mov	r28, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	24 e0       	ldi	r18, 0x04	; 4
    1b98:	95 95       	asr	r25
    1b9a:	87 95       	ror	r24
    1b9c:	2a 95       	dec	r18
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <uart_writehex8+0x8>
    1ba0:	8a 30       	cpi	r24, 0x0A	; 10
    1ba2:	10 f4       	brcc	.+4      	; 0x1ba8 <uart_writehex8+0x18>
    1ba4:	80 5d       	subi	r24, 0xD0	; 208
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <uart_writehex8+0x1a>
    1ba8:	89 5c       	subi	r24, 0xC9	; 201
    1baa:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <serial_writechar>
    1bae:	8c 2f       	mov	r24, r28
    1bb0:	8f 70       	andi	r24, 0x0F	; 15
    1bb2:	8a 30       	cpi	r24, 0x0A	; 10
    1bb4:	10 f0       	brcs	.+4      	; 0x1bba <uart_writehex8+0x2a>
    1bb6:	89 5c       	subi	r24, 0xC9	; 201
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <uart_writehex8+0x2c>
    1bba:	80 5d       	subi	r24, 0xD0	; 208
    1bbc:	cf 91       	pop	r28
    1bbe:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <serial_writechar>

00001bc2 <uart_writehex16>:
    1bc2:	cf 93       	push	r28
    1bc4:	c8 2f       	mov	r28, r24
    1bc6:	89 2f       	mov	r24, r25
    1bc8:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <uart_writehex8>
    1bcc:	8c 2f       	mov	r24, r28
    1bce:	cf 91       	pop	r28
    1bd0:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <uart_writehex8>

00001bd4 <uart_writedec32>:
    1bd4:	2f 92       	push	r2
    1bd6:	3f 92       	push	r3
    1bd8:	4f 92       	push	r4
    1bda:	5f 92       	push	r5
    1bdc:	6f 92       	push	r6
    1bde:	7f 92       	push	r7
    1be0:	8f 92       	push	r8
    1be2:	9f 92       	push	r9
    1be4:	af 92       	push	r10
    1be6:	bf 92       	push	r11
    1be8:	cf 92       	push	r12
    1bea:	df 92       	push	r13
    1bec:	ef 92       	push	r14
    1bee:	ff 92       	push	r15
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	63 97       	sbiw	r28, 0x13	; 19
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	6b 01       	movw	r12, r22
    1c0a:	7c 01       	movw	r14, r24
    1c0c:	97 ff       	sbrs	r25, 7
    1c0e:	0d c0       	rjmp	.+26     	; 0x1c2a <uart_writedec32+0x56>
    1c10:	f0 94       	com	r15
    1c12:	e0 94       	com	r14
    1c14:	d0 94       	com	r13
    1c16:	c0 94       	com	r12
    1c18:	c1 1c       	adc	r12, r1
    1c1a:	d1 1c       	adc	r13, r1
    1c1c:	e1 1c       	adc	r14, r1
    1c1e:	f1 1c       	adc	r15, r1
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9b 8b       	std	Y+19, r25	; 0x13
    1c26:	8a 8b       	std	Y+18, r24	; 0x12
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <uart_writedec32+0x5a>
    1c2a:	1b 8a       	std	Y+19, r1	; 0x13
    1c2c:	1a 8a       	std	Y+18, r1	; 0x12
    1c2e:	fe 01       	movw	r30, r28
    1c30:	31 96       	adiw	r30, 0x01	; 1
    1c32:	5f 01       	movw	r10, r30
    1c34:	8e 01       	movw	r16, r28
    1c36:	05 5f       	subi	r16, 0xF5	; 245
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	f9 8b       	std	Y+17, r31	; 0x11
    1c3c:	e8 8b       	std	Y+16, r30	; 0x10
    1c3e:	66 24       	eor	r6, r6
    1c40:	63 94       	inc	r6
    1c42:	71 2c       	mov	r7, r1
    1c44:	81 2c       	mov	r8, r1
    1c46:	91 2c       	mov	r9, r1
    1c48:	aa e0       	ldi	r26, 0x0A	; 10
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	93 01       	movw	r18, r6
    1c4e:	a4 01       	movw	r20, r8
    1c50:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    1c54:	1b 01       	movw	r2, r22
    1c56:	2c 01       	movw	r4, r24
    1c58:	c7 01       	movw	r24, r14
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	91 01       	movw	r18, r2
    1c5e:	a2 01       	movw	r20, r4
    1c60:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__divmodsi4>
    1c64:	93 01       	movw	r18, r6
    1c66:	a4 01       	movw	r20, r8
    1c68:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__divmodsi4>
    1c6c:	e8 89       	ldd	r30, Y+16	; 0x10
    1c6e:	f9 89       	ldd	r31, Y+17	; 0x11
    1c70:	21 93       	st	Z+, r18
    1c72:	f9 8b       	std	Y+17, r31	; 0x11
    1c74:	e8 8b       	std	Y+16, r30	; 0x10
    1c76:	82 2f       	mov	r24, r18
    1c78:	22 0f       	add	r18, r18
    1c7a:	99 0b       	sbc	r25, r25
    1c7c:	aa 0b       	sbc	r26, r26
    1c7e:	bb 0b       	sbc	r27, r27
    1c80:	c8 1a       	sub	r12, r24
    1c82:	d9 0a       	sbc	r13, r25
    1c84:	ea 0a       	sbc	r14, r26
    1c86:	fb 0a       	sbc	r15, r27
    1c88:	31 01       	movw	r6, r2
    1c8a:	42 01       	movw	r8, r4
    1c8c:	0e 17       	cp	r16, r30
    1c8e:	1f 07       	cpc	r17, r31
    1c90:	d9 f6       	brne	.-74     	; 0x1c48 <uart_writedec32+0x74>
    1c92:	8a 89       	ldd	r24, Y+18	; 0x12
    1c94:	9b 89       	ldd	r25, Y+19	; 0x13
    1c96:	89 2b       	or	r24, r25
    1c98:	19 f0       	breq	.+6      	; 0x1ca0 <uart_writedec32+0xcc>
    1c9a:	8d e2       	ldi	r24, 0x2D	; 45
    1c9c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <serial_writechar>
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	82 91       	ld	r24, -Z
    1ca8:	8f 01       	movw	r16, r30
    1caa:	81 11       	cpse	r24, r1
    1cac:	06 c0       	rjmp	.+12     	; 0x1cba <uart_writedec32+0xe6>
    1cae:	21 15       	cp	r18, r1
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	19 f4       	brne	.+6      	; 0x1cba <uart_writedec32+0xe6>
    1cb4:	ea 15       	cp	r30, r10
    1cb6:	fb 05       	cpc	r31, r11
    1cb8:	29 f4       	brne	.+10     	; 0x1cc4 <uart_writedec32+0xf0>
    1cba:	80 5d       	subi	r24, 0xD0	; 208
    1cbc:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <serial_writechar>
    1cc0:	21 e0       	ldi	r18, 0x01	; 1
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	0a 15       	cp	r16, r10
    1cc6:	1b 05       	cpc	r17, r11
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <uart_writedec32+0xd0>
    1cca:	63 96       	adiw	r28, 0x13	; 19
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	ff 90       	pop	r15
    1ce0:	ef 90       	pop	r14
    1ce2:	df 90       	pop	r13
    1ce4:	cf 90       	pop	r12
    1ce6:	bf 90       	pop	r11
    1ce8:	af 90       	pop	r10
    1cea:	9f 90       	pop	r9
    1cec:	8f 90       	pop	r8
    1cee:	7f 90       	pop	r7
    1cf0:	6f 90       	pop	r6
    1cf2:	5f 90       	pop	r5
    1cf4:	4f 90       	pop	r4
    1cf6:	3f 90       	pop	r3
    1cf8:	2f 90       	pop	r2
    1cfa:	08 95       	ret

00001cfc <uart_is_connected>:
    1cfc:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <serial_isconnected>

00001d00 <uart_is_packet_available>:
    1d00:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <serial_is_packet_ready>

00001d04 <uart_readpacket>:
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	ec 01       	movw	r28, r24
    1d10:	06 2f       	mov	r16, r22
    1d12:	f7 2e       	mov	r15, r23
    1d14:	18 82       	st	Y, r1
    1d16:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <serial_isconnected>
    1d1a:	10 e0       	ldi	r17, 0x00	; 0
    1d1c:	88 23       	and	r24, r24
    1d1e:	d9 f0       	breq	.+54     	; 0x1d56 <uart_readpacket+0x52>
    1d20:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <serial_rxchars>
    1d24:	88 23       	and	r24, r24
    1d26:	b9 f0       	breq	.+46     	; 0x1d56 <uart_readpacket+0x52>
    1d28:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <serial_popchar>
    1d2c:	80 32       	cpi	r24, 0x20	; 32
    1d2e:	10 f0       	brcs	.+4      	; 0x1d34 <uart_readpacket+0x30>
    1d30:	89 93       	st	Y+, r24
    1d32:	1f 5f       	subi	r17, 0xFF	; 255
    1d34:	e0 2f       	mov	r30, r16
    1d36:	ff 2d       	mov	r31, r15
    1d38:	48 2f       	mov	r20, r24
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	21 91       	ld	r18, Z+
    1d3e:	22 23       	and	r18, r18
    1d40:	39 f0       	breq	.+14     	; 0x1d50 <uart_readpacket+0x4c>
    1d42:	02 2e       	mov	r0, r18
    1d44:	00 0c       	add	r0, r0
    1d46:	33 0b       	sbc	r19, r19
    1d48:	42 17       	cp	r20, r18
    1d4a:	53 07       	cpc	r21, r19
    1d4c:	b9 f7       	brne	.-18     	; 0x1d3c <uart_readpacket+0x38>
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <uart_readpacket+0x50>
    1d50:	8d 30       	cpi	r24, 0x0D	; 13
    1d52:	51 f7       	brne	.-44     	; 0x1d28 <uart_readpacket+0x24>
    1d54:	18 82       	st	Y, r1
    1d56:	81 2f       	mov	r24, r17
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	08 95       	ret

00001d64 <uart_writeip>:
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	8c 01       	movw	r16, r24
    1d6e:	ec 01       	movw	r28, r24
    1d70:	69 91       	ld	r22, Y+
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_writedec32>
    1d7c:	0c 5f       	subi	r16, 0xFC	; 252
    1d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d80:	8e e2       	ldi	r24, 0x2E	; 46
    1d82:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <serial_writechar>
    1d86:	69 91       	ld	r22, Y+
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_writedec32>
    1d92:	c0 17       	cp	r28, r16
    1d94:	d1 07       	cpc	r29, r17
    1d96:	a1 f7       	brne	.-24     	; 0x1d80 <uart_writeip+0x1c>
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <uart_writestr>

00001da8 <write_packet_string>:
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	ec 01       	movw	r28, r24
    1dae:	82 e2       	ldi	r24, 0x22	; 34
    1db0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    1db4:	ce 01       	movw	r24, r28
    1db6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1dba:	82 e2       	ldi	r24, 0x22	; 34
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <uart_writechar>

00001dc4 <send_error_response>:
    1dc4:	88 ef       	ldi	r24, 0xF8	; 248
    1dc6:	91 e0       	ldi	r25, 0x01	; 1
    1dc8:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <uart_writestr>

00001dcc <strtoi.constprop.2>:
    1dcc:	dc 01       	movw	r26, r24
    1dce:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <packet_buf>
    1dd2:	8d 32       	cpi	r24, 0x2D	; 45
    1dd4:	29 f4       	brne	.+10     	; 0x1de0 <strtoi.constprop.2+0x14>
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	9f ef       	ldi	r25, 0xFF	; 255
    1dda:	e4 e5       	ldi	r30, 0x54	; 84
    1ddc:	f4 e0       	ldi	r31, 0x04	; 4
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <strtoi.constprop.2+0x1c>
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	e3 e5       	ldi	r30, 0x53	; 83
    1de6:	f4 e0       	ldi	r31, 0x04	; 4
    1de8:	11 96       	adiw	r26, 0x01	; 1
    1dea:	1c 92       	st	X, r1
    1dec:	1e 92       	st	-X, r1
    1dee:	6a e0       	ldi	r22, 0x0A	; 10
    1df0:	40 81       	ld	r20, Z
    1df2:	2d 91       	ld	r18, X+
    1df4:	3c 91       	ld	r19, X
    1df6:	11 97       	sbiw	r26, 0x01	; 1
    1df8:	44 23       	and	r20, r20
    1dfa:	c1 f0       	breq	.+48     	; 0x1e2c <strtoi.constprop.2+0x60>
    1dfc:	62 9f       	mul	r22, r18
    1dfe:	a0 01       	movw	r20, r0
    1e00:	63 9f       	mul	r22, r19
    1e02:	50 0d       	add	r21, r0
    1e04:	11 24       	eor	r1, r1
    1e06:	11 96       	adiw	r26, 0x01	; 1
    1e08:	5c 93       	st	X, r21
    1e0a:	4e 93       	st	-X, r20
    1e0c:	21 91       	ld	r18, Z+
    1e0e:	30 ed       	ldi	r19, 0xD0	; 208
    1e10:	32 0f       	add	r19, r18
    1e12:	3a 30       	cpi	r19, 0x0A	; 10
    1e14:	b8 f4       	brcc	.+46     	; 0x1e44 <strtoi.constprop.2+0x78>
    1e16:	02 2e       	mov	r0, r18
    1e18:	00 0c       	add	r0, r0
    1e1a:	33 0b       	sbc	r19, r19
    1e1c:	20 53       	subi	r18, 0x30	; 48
    1e1e:	31 09       	sbc	r19, r1
    1e20:	24 0f       	add	r18, r20
    1e22:	35 1f       	adc	r19, r21
    1e24:	11 96       	adiw	r26, 0x01	; 1
    1e26:	3c 93       	st	X, r19
    1e28:	2e 93       	st	-X, r18
    1e2a:	e2 cf       	rjmp	.-60     	; 0x1df0 <strtoi.constprop.2+0x24>
    1e2c:	28 9f       	mul	r18, r24
    1e2e:	a0 01       	movw	r20, r0
    1e30:	29 9f       	mul	r18, r25
    1e32:	50 0d       	add	r21, r0
    1e34:	38 9f       	mul	r19, r24
    1e36:	50 0d       	add	r21, r0
    1e38:	11 24       	eor	r1, r1
    1e3a:	4d 93       	st	X+, r20
    1e3c:	5c 93       	st	X, r21
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	08 95       	ret
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	08 95       	ret

00001e4a <uartsocket_writechar>:
    1e4a:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <uart_writechar>

00001e4e <uartsocket_writestr>:
    1e4e:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <uart_writestr>

00001e52 <uartsocket_writehex8>:
    1e52:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <uart_writehex8>

00001e56 <uartsocket_writehex16>:
    1e56:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <uart_writehex16>

00001e5a <uartsocket_writedec32>:
    1e5a:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <uart_writedec32>

00001e5e <uartsocket_is_connected>:
    1e5e:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <serial_isconnected>

00001e62 <uartsocket_is_packet_available>:
    1e62:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <serial_is_packet_ready>

00001e66 <uartsocket_readpacket>:
    1e66:	ff 92       	push	r15
    1e68:	0f 93       	push	r16
    1e6a:	1f 93       	push	r17
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	ec 01       	movw	r28, r24
    1e72:	06 2f       	mov	r16, r22
    1e74:	f7 2e       	mov	r15, r23
    1e76:	18 82       	st	Y, r1
    1e78:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <serial_isconnected>
    1e7c:	10 e0       	ldi	r17, 0x00	; 0
    1e7e:	88 23       	and	r24, r24
    1e80:	d9 f0       	breq	.+54     	; 0x1eb8 <uartsocket_readpacket+0x52>
    1e82:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <serial_rxchars>
    1e86:	88 23       	and	r24, r24
    1e88:	b9 f0       	breq	.+46     	; 0x1eb8 <uartsocket_readpacket+0x52>
    1e8a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <serial_popchar>
    1e8e:	80 32       	cpi	r24, 0x20	; 32
    1e90:	10 f0       	brcs	.+4      	; 0x1e96 <uartsocket_readpacket+0x30>
    1e92:	89 93       	st	Y+, r24
    1e94:	1f 5f       	subi	r17, 0xFF	; 255
    1e96:	e0 2f       	mov	r30, r16
    1e98:	ff 2d       	mov	r31, r15
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	21 91       	ld	r18, Z+
    1ea0:	22 23       	and	r18, r18
    1ea2:	39 f0       	breq	.+14     	; 0x1eb2 <uartsocket_readpacket+0x4c>
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	00 0c       	add	r0, r0
    1ea8:	33 0b       	sbc	r19, r19
    1eaa:	42 17       	cp	r20, r18
    1eac:	53 07       	cpc	r21, r19
    1eae:	b9 f7       	brne	.-18     	; 0x1e9e <uartsocket_readpacket+0x38>
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <uartsocket_readpacket+0x50>
    1eb2:	8d 30       	cpi	r24, 0x0D	; 13
    1eb4:	51 f7       	brne	.-44     	; 0x1e8a <uartsocket_readpacket+0x24>
    1eb6:	18 82       	st	Y, r1
    1eb8:	81 2f       	mov	r24, r17
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	ff 90       	pop	r15
    1ec4:	08 95       	ret

00001ec6 <flush_packet>:
    1ec6:	62 e0       	ldi	r22, 0x02	; 2
    1ec8:	72 e0       	ldi	r23, 0x02	; 2
    1eca:	83 e5       	ldi	r24, 0x53	; 83
    1ecc:	94 e0       	ldi	r25, 0x04	; 4
    1ece:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    1ed2:	88 23       	and	r24, r24
    1ed4:	49 f0       	breq	.+18     	; 0x1ee8 <flush_packet+0x22>
    1ed6:	e8 2f       	mov	r30, r24
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	ee 5a       	subi	r30, 0xAE	; 174
    1edc:	fb 4f       	sbci	r31, 0xFB	; 251
    1ede:	80 81       	ld	r24, Z
    1ee0:	8f 32       	cpi	r24, 0x2F	; 47
    1ee2:	89 f3       	breq	.-30     	; 0x1ec6 <flush_packet>
    1ee4:	80 32       	cpi	r24, 0x20	; 32
    1ee6:	79 f3       	breq	.-34     	; 0x1ec6 <flush_packet>
    1ee8:	08 95       	ret

00001eea <parse_and_send_response>:
    1eea:	0f 93       	push	r16
    1eec:	1f 93       	push	r17
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <parse_and_send_response+0xa>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <parse_and_send_response+0xc>
    1ef6:	1f 92       	push	r1
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	62 e0       	ldi	r22, 0x02	; 2
    1efe:	72 e0       	ldi	r23, 0x02	; 2
    1f00:	83 e5       	ldi	r24, 0x53	; 83
    1f02:	94 e0       	ldi	r25, 0x04	; 4
    1f04:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    1f08:	65 e0       	ldi	r22, 0x05	; 5
    1f0a:	72 e0       	ldi	r23, 0x02	; 2
    1f0c:	83 e5       	ldi	r24, 0x53	; 83
    1f0e:	94 e0       	ldi	r25, 0x04	; 4
    1f10:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    1f14:	89 2b       	or	r24, r25
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <parse_and_send_response+0x30>
    1f18:	bb c1       	rjmp	.+886    	; 0x2290 <parse_and_send_response+0x3a6>
    1f1a:	62 e0       	ldi	r22, 0x02	; 2
    1f1c:	72 e0       	ldi	r23, 0x02	; 2
    1f1e:	83 e5       	ldi	r24, 0x53	; 83
    1f20:	94 e0       	ldi	r25, 0x04	; 4
    1f22:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    1f26:	60 e8       	ldi	r22, 0x80	; 128
    1f28:	73 e0       	ldi	r23, 0x03	; 3
    1f2a:	83 e5       	ldi	r24, 0x53	; 83
    1f2c:	94 e0       	ldi	r25, 0x04	; 4
    1f2e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    1f32:	89 2b       	or	r24, r25
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <parse_and_send_response+0x4e>
    1f36:	81 c2       	rjmp	.+1282   	; 0x243a <parse_and_send_response+0x550>
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	72 e0       	ldi	r23, 0x02	; 2
    1f3c:	83 e5       	ldi	r24, 0x53	; 83
    1f3e:	94 e0       	ldi	r25, 0x04	; 4
    1f40:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    1f44:	6a e0       	ldi	r22, 0x0A	; 10
    1f46:	72 e0       	ldi	r23, 0x02	; 2
    1f48:	83 e5       	ldi	r24, 0x53	; 83
    1f4a:	94 e0       	ldi	r25, 0x04	; 4
    1f4c:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    1f50:	89 2b       	or	r24, r25
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <parse_and_send_response+0x6c>
    1f54:	72 c2       	rjmp	.+1252   	; 0x243a <parse_and_send_response+0x550>
    1f56:	8d e1       	ldi	r24, 0x1D	; 29
    1f58:	93 e0       	ldi	r25, 0x03	; 3
    1f5a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1f5e:	8f ef       	ldi	r24, 0xFF	; 255
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1f66:	81 e1       	ldi	r24, 0x11	; 17
    1f68:	92 e0       	ldi	r25, 0x02	; 2
    1f6a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1f6e:	8f ef       	ldi	r24, 0xFF	; 255
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1f76:	8b e1       	ldi	r24, 0x1B	; 27
    1f78:	92 e0       	ldi	r25, 0x02	; 2
    1f7a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	95 e0       	ldi	r25, 0x05	; 5
    1f82:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <write_packet_string>
    1f86:	8c e2       	ldi	r24, 0x2C	; 44
    1f88:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1f94:	88 e2       	ldi	r24, 0x28	; 40
    1f96:	92 e0       	ldi	r25, 0x02	; 2
    1f98:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1f9c:	8d e0       	ldi	r24, 0x0D	; 13
    1f9e:	95 e0       	ldi	r25, 0x05	; 5
    1fa0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <write_packet_string>
    1fa4:	8c e2       	ldi	r24, 0x2C	; 44
    1fa6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    1faa:	8f ef       	ldi	r24, 0xFF	; 255
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1fb2:	8c e3       	ldi	r24, 0x3C	; 60
    1fb4:	92 e0       	ldi	r25, 0x02	; 2
    1fb6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1fba:	89 e1       	ldi	r24, 0x19	; 25
    1fbc:	95 e0       	ldi	r25, 0x05	; 5
    1fbe:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <write_packet_string>
    1fc2:	8c e2       	ldi	r24, 0x2C	; 44
    1fc4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    1fc8:	8f ef       	ldi	r24, 0xFF	; 255
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1fd0:	81 e5       	ldi	r24, 0x51	; 81
    1fd2:	92 e0       	ldi	r25, 0x02	; 2
    1fd4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1fd8:	60 91 25 05 	lds	r22, 0x0525	; 0x800525 <vpd+0x28>
    1fdc:	70 91 26 05 	lds	r23, 0x0526	; 0x800526 <vpd+0x29>
    1fe0:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <vpd+0x2a>
    1fe4:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <vpd+0x2b>
    1fe8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <rtc_num2datestr>
    1fec:	8c 01       	movw	r16, r24
    1fee:	fc 01       	movw	r30, r24
    1ff0:	12 86       	std	Z+10, r1	; 0x0a
    1ff2:	82 e2       	ldi	r24, 0x22	; 34
    1ff4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    1ffe:	82 e2       	ldi	r24, 0x22	; 34
    2000:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    2004:	8c e2       	ldi	r24, 0x2C	; 44
    2006:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    200a:	8f ef       	ldi	r24, 0xFF	; 255
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2012:	89 e6       	ldi	r24, 0x69	; 105
    2014:	92 e0       	ldi	r25, 0x02	; 2
    2016:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    201a:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <vpd+0x2c>
    201e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <uart_writehex8>
    2022:	0a e2       	ldi	r16, 0x2A	; 42
    2024:	15 e0       	ldi	r17, 0x05	; 5
    2026:	8a e3       	ldi	r24, 0x3A	; 58
    2028:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    202c:	f8 01       	movw	r30, r16
    202e:	81 91       	ld	r24, Z+
    2030:	8f 01       	movw	r16, r30
    2032:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <uart_writehex8>
    2036:	f5 e0       	ldi	r31, 0x05	; 5
    2038:	0f 32       	cpi	r16, 0x2F	; 47
    203a:	1f 07       	cpc	r17, r31
    203c:	a1 f7       	brne	.-24     	; 0x2026 <parse_and_send_response+0x13c>
    203e:	8d e7       	ldi	r24, 0x7D	; 125
    2040:	92 e0       	ldi	r25, 0x02	; 2
    2042:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    204e:	80 e8       	ldi	r24, 0x80	; 128
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2056:	8f e2       	ldi	r24, 0x2F	; 47
    2058:	95 e0       	ldi	r25, 0x05	; 5
    205a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <write_packet_string>
    205e:	8f ef       	ldi	r24, 0xFF	; 255
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2066:	80 e4       	ldi	r24, 0x40	; 64
    2068:	93 e0       	ldi	r25, 0x03	; 3
    206a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    206e:	8f ef       	ldi	r24, 0xFF	; 255
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2076:	84 e9       	ldi	r24, 0x94	; 148
    2078:	92 e0       	ldi	r25, 0x02	; 2
    207a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    207e:	60 91 a6 04 	lds	r22, 0x04A6	; 0x8004a6 <config+0x4>
    2082:	70 91 a7 04 	lds	r23, 0x04A7	; 0x8004a7 <config+0x5>
    2086:	07 2e       	mov	r0, r23
    2088:	00 0c       	add	r0, r0
    208a:	88 0b       	sbc	r24, r24
    208c:	99 0b       	sbc	r25, r25
    208e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_writedec32>
    2092:	8c e2       	ldi	r24, 0x2C	; 44
    2094:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    2098:	8f ef       	ldi	r24, 0xFF	; 255
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    20a0:	82 ea       	ldi	r24, 0xA2	; 162
    20a2:	92 e0       	ldi	r25, 0x02	; 2
    20a4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    20a8:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <config+0x6>
    20ac:	70 91 a9 04 	lds	r23, 0x04A9	; 0x8004a9 <config+0x7>
    20b0:	07 2e       	mov	r0, r23
    20b2:	00 0c       	add	r0, r0
    20b4:	88 0b       	sbc	r24, r24
    20b6:	99 0b       	sbc	r25, r25
    20b8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_writedec32>
    20bc:	8c e2       	ldi	r24, 0x2C	; 44
    20be:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	91 e0       	ldi	r25, 0x01	; 1
    20c6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    20ca:	80 eb       	ldi	r24, 0xB0	; 176
    20cc:	92 e0       	ldi	r25, 0x02	; 2
    20ce:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    20d2:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <config+0x8>
    20d6:	70 91 ab 04 	lds	r23, 0x04AB	; 0x8004ab <config+0x9>
    20da:	07 2e       	mov	r0, r23
    20dc:	00 0c       	add	r0, r0
    20de:	88 0b       	sbc	r24, r24
    20e0:	99 0b       	sbc	r25, r25
    20e2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_writedec32>
    20e6:	8c e2       	ldi	r24, 0x2C	; 44
    20e8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    20f4:	8e eb       	ldi	r24, 0xBE	; 190
    20f6:	92 e0       	ldi	r25, 0x02	; 2
    20f8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    20fc:	60 91 ac 04 	lds	r22, 0x04AC	; 0x8004ac <config+0xa>
    2100:	70 91 ad 04 	lds	r23, 0x04AD	; 0x8004ad <config+0xb>
    2104:	07 2e       	mov	r0, r23
    2106:	00 0c       	add	r0, r0
    2108:	88 0b       	sbc	r24, r24
    210a:	99 0b       	sbc	r25, r25
    210c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_writedec32>
    2110:	8c e2       	ldi	r24, 0x2C	; 44
    2112:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    2116:	8f ef       	ldi	r24, 0xFF	; 255
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    211e:	8c ec       	ldi	r24, 0xCC	; 204
    2120:	92 e0       	ldi	r25, 0x02	; 2
    2122:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2126:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    212a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    212e:	07 2e       	mov	r0, r23
    2130:	00 0c       	add	r0, r0
    2132:	88 0b       	sbc	r24, r24
    2134:	99 0b       	sbc	r25, r25
    2136:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_writedec32>
    213a:	8c e2       	ldi	r24, 0x2C	; 44
    213c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    2140:	8f ef       	ldi	r24, 0xFF	; 255
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2148:	8d ed       	ldi	r24, 0xDD	; 221
    214a:	92 e0       	ldi	r25, 0x02	; 2
    214c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2158:	20 91 a6 04 	lds	r18, 0x04A6	; 0x8004a6 <config+0x4>
    215c:	30 91 a7 04 	lds	r19, 0x04A7	; 0x8004a7 <config+0x5>
    2160:	82 17       	cp	r24, r18
    2162:	93 07       	cpc	r25, r19
    2164:	1c f0       	brlt	.+6      	; 0x216c <parse_and_send_response+0x282>
    2166:	88 ee       	ldi	r24, 0xE8	; 232
    2168:	92 e0       	ldi	r25, 0x02	; 2
    216a:	20 c0       	rjmp	.+64     	; 0x21ac <parse_and_send_response+0x2c2>
    216c:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <config+0x6>
    2170:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <config+0x7>
    2174:	82 17       	cp	r24, r18
    2176:	93 07       	cpc	r25, r19
    2178:	1c f0       	brlt	.+6      	; 0x2180 <parse_and_send_response+0x296>
    217a:	80 ef       	ldi	r24, 0xF0	; 240
    217c:	92 e0       	ldi	r25, 0x02	; 2
    217e:	16 c0       	rjmp	.+44     	; 0x21ac <parse_and_send_response+0x2c2>
    2180:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <config+0xa>
    2184:	30 91 ad 04 	lds	r19, 0x04AD	; 0x8004ad <config+0xb>
    2188:	28 17       	cp	r18, r24
    218a:	39 07       	cpc	r19, r25
    218c:	1c f4       	brge	.+6      	; 0x2194 <parse_and_send_response+0x2aa>
    218e:	88 ef       	ldi	r24, 0xF8	; 248
    2190:	92 e0       	ldi	r25, 0x02	; 2
    2192:	0c c0       	rjmp	.+24     	; 0x21ac <parse_and_send_response+0x2c2>
    2194:	20 91 aa 04 	lds	r18, 0x04AA	; 0x8004aa <config+0x8>
    2198:	30 91 ab 04 	lds	r19, 0x04AB	; 0x8004ab <config+0x9>
    219c:	28 17       	cp	r18, r24
    219e:	39 07       	cpc	r19, r25
    21a0:	1c f4       	brge	.+6      	; 0x21a8 <parse_and_send_response+0x2be>
    21a2:	8f ef       	ldi	r24, 0xFF	; 255
    21a4:	92 e0       	ldi	r25, 0x02	; 2
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <parse_and_send_response+0x2c2>
    21a8:	87 e0       	ldi	r24, 0x07	; 7
    21aa:	93 e0       	ldi	r25, 0x03	; 3
    21ac:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    21b0:	8c e2       	ldi	r24, 0x2C	; 44
    21b2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    21be:	8f e0       	ldi	r24, 0x0F	; 15
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	91 e0       	ldi	r25, 0x01	; 1
    21ca:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    21ce:	10 e0       	ldi	r17, 0x00	; 0
    21d0:	0e 94 47 09 	call	0x128e	; 0x128e <log_get_num_entries>
    21d4:	18 17       	cp	r17, r24
    21d6:	08 f0       	brcs	.+2      	; 0x21da <parse_and_send_response+0x2f0>
    21d8:	48 c0       	rjmp	.+144    	; 0x226a <parse_and_send_response+0x380>
    21da:	81 2f       	mov	r24, r17
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	9e 01       	movw	r18, r28
    21e4:	2b 5f       	subi	r18, 0xFB	; 251
    21e6:	3f 4f       	sbci	r19, 0xFF	; 255
    21e8:	ae 01       	movw	r20, r28
    21ea:	4f 5f       	subi	r20, 0xFF	; 255
    21ec:	5f 4f       	sbci	r21, 0xFF	; 255
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <log_get_record>
    21f6:	11 23       	and	r17, r17
    21f8:	39 f0       	breq	.+14     	; 0x2208 <parse_and_send_response+0x31e>
    21fa:	8c e2       	ldi	r24, 0x2C	; 44
    21fc:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	91 e0       	ldi	r25, 0x01	; 1
    2204:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2208:	89 e1       	ldi	r24, 0x19	; 25
    220a:	93 e0       	ldi	r25, 0x03	; 3
    220c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2210:	8f ef       	ldi	r24, 0xFF	; 255
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2218:	8f e1       	ldi	r24, 0x1F	; 31
    221a:	93 e0       	ldi	r25, 0x03	; 3
    221c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2220:	82 e2       	ldi	r24, 0x22	; 34
    2222:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    2226:	69 81       	ldd	r22, Y+1	; 0x01
    2228:	7a 81       	ldd	r23, Y+2	; 0x02
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <rtc_num2datestr>
    2232:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2236:	82 e2       	ldi	r24, 0x22	; 34
    2238:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    223c:	8c e2       	ldi	r24, 0x2C	; 44
    223e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <uart_writechar>
    2242:	82 e3       	ldi	r24, 0x32	; 50
    2244:	93 e0       	ldi	r25, 0x03	; 3
    2246:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    224a:	6d 81       	ldd	r22, Y+5	; 0x05
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_writedec32>
    2256:	8f ef       	ldi	r24, 0xFF	; 255
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    225e:	8e e3       	ldi	r24, 0x3E	; 62
    2260:	93 e0       	ldi	r25, 0x03	; 3
    2262:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2266:	1f 5f       	subi	r17, 0xFF	; 255
    2268:	b3 cf       	rjmp	.-154    	; 0x21d0 <parse_and_send_response+0x2e6>
    226a:	8f ef       	ldi	r24, 0xFF	; 255
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2272:	84 e4       	ldi	r24, 0x44	; 68
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    227a:	8f ef       	ldi	r24, 0xFF	; 255
    227c:	91 e0       	ldi	r25, 0x01	; 1
    227e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    2282:	82 e4       	ldi	r24, 0x42	; 66
    2284:	93 e0       	ldi	r25, 0x03	; 3
    2286:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    228a:	8f ef       	ldi	r24, 0xFF	; 255
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	17 c1       	rjmp	.+558    	; 0x24be <parse_and_send_response+0x5d4>
    2290:	68 e4       	ldi	r22, 0x48	; 72
    2292:	73 e0       	ldi	r23, 0x03	; 3
    2294:	83 e5       	ldi	r24, 0x53	; 83
    2296:	94 e0       	ldi	r25, 0x04	; 4
    2298:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    229c:	89 2b       	or	r24, r25
    229e:	09 f0       	breq	.+2      	; 0x22a2 <parse_and_send_response+0x3b8>
    22a0:	d8 c0       	rjmp	.+432    	; 0x2452 <parse_and_send_response+0x568>
    22a2:	62 e0       	ldi	r22, 0x02	; 2
    22a4:	72 e0       	ldi	r23, 0x02	; 2
    22a6:	83 e5       	ldi	r24, 0x53	; 83
    22a8:	94 e0       	ldi	r25, 0x04	; 4
    22aa:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    22ae:	60 e8       	ldi	r22, 0x80	; 128
    22b0:	73 e0       	ldi	r23, 0x03	; 3
    22b2:	83 e5       	ldi	r24, 0x53	; 83
    22b4:	94 e0       	ldi	r25, 0x04	; 4
    22b6:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    22ba:	89 2b       	or	r24, r25
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <parse_and_send_response+0x3d6>
    22be:	bd c0       	rjmp	.+378    	; 0x243a <parse_and_send_response+0x550>
    22c0:	6d e4       	ldi	r22, 0x4D	; 77
    22c2:	73 e0       	ldi	r23, 0x03	; 3
    22c4:	83 e5       	ldi	r24, 0x53	; 83
    22c6:	94 e0       	ldi	r25, 0x04	; 4
    22c8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    22cc:	61 e5       	ldi	r22, 0x51	; 81
    22ce:	73 e0       	ldi	r23, 0x03	; 3
    22d0:	83 e5       	ldi	r24, 0x53	; 83
    22d2:	94 e0       	ldi	r25, 0x04	; 4
    22d4:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    22d8:	89 2b       	or	r24, r25
    22da:	89 f5       	brne	.+98     	; 0x233e <parse_and_send_response+0x454>
    22dc:	69 e5       	ldi	r22, 0x59	; 89
    22de:	73 e0       	ldi	r23, 0x03	; 3
    22e0:	83 e5       	ldi	r24, 0x53	; 83
    22e2:	94 e0       	ldi	r25, 0x04	; 4
    22e4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    22e8:	6d e5       	ldi	r22, 0x5D	; 93
    22ea:	73 e0       	ldi	r23, 0x03	; 3
    22ec:	83 e5       	ldi	r24, 0x53	; 83
    22ee:	94 e0       	ldi	r25, 0x04	; 4
    22f0:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    22f4:	89 2b       	or	r24, r25
    22f6:	09 f0       	breq	.+2      	; 0x22fa <parse_and_send_response+0x410>
    22f8:	a0 c0       	rjmp	.+320    	; 0x243a <parse_and_send_response+0x550>
    22fa:	62 e0       	ldi	r22, 0x02	; 2
    22fc:	72 e0       	ldi	r23, 0x02	; 2
    22fe:	83 e5       	ldi	r24, 0x53	; 83
    2300:	94 e0       	ldi	r25, 0x04	; 4
    2302:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    2306:	64 e6       	ldi	r22, 0x64	; 100
    2308:	73 e0       	ldi	r23, 0x03	; 3
    230a:	83 e5       	ldi	r24, 0x53	; 83
    230c:	94 e0       	ldi	r25, 0x04	; 4
    230e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    2312:	89 2b       	or	r24, r25
    2314:	29 f4       	brne	.+10     	; 0x2320 <parse_and_send_response+0x436>
    2316:	8c e6       	ldi	r24, 0x6C	; 108
    2318:	93 e0       	ldi	r25, 0x03	; 3
    231a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    231e:	8f c0       	rjmp	.+286    	; 0x243e <parse_and_send_response+0x554>
    2320:	63 e7       	ldi	r22, 0x73	; 115
    2322:	73 e0       	ldi	r23, 0x03	; 3
    2324:	83 e5       	ldi	r24, 0x53	; 83
    2326:	94 e0       	ldi	r25, 0x04	; 4
    2328:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    232c:	89 2b       	or	r24, r25
    232e:	09 f0       	breq	.+2      	; 0x2332 <parse_and_send_response+0x448>
    2330:	84 c0       	rjmp	.+264    	; 0x243a <parse_and_send_response+0x550>
    2332:	8c e6       	ldi	r24, 0x6C	; 108
    2334:	93 e0       	ldi	r25, 0x03	; 3
    2336:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    233a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <wdt_force_restart>
    233e:	6a e7       	ldi	r22, 0x7A	; 122
    2340:	73 e0       	ldi	r23, 0x03	; 3
    2342:	83 e5       	ldi	r24, 0x53	; 83
    2344:	94 e0       	ldi	r25, 0x04	; 4
    2346:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    234a:	89 2b       	or	r24, r25
    234c:	09 f0       	breq	.+2      	; 0x2350 <parse_and_send_response+0x466>
    234e:	75 c0       	rjmp	.+234    	; 0x243a <parse_and_send_response+0x550>
    2350:	6d e4       	ldi	r22, 0x4D	; 77
    2352:	73 e0       	ldi	r23, 0x03	; 3
    2354:	83 e5       	ldi	r24, 0x53	; 83
    2356:	94 e0       	ldi	r25, 0x04	; 4
    2358:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    235c:	62 e8       	ldi	r22, 0x82	; 130
    235e:	73 e0       	ldi	r23, 0x03	; 3
    2360:	83 e5       	ldi	r24, 0x53	; 83
    2362:	94 e0       	ldi	r25, 0x04	; 4
    2364:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    2368:	89 2b       	or	r24, r25
    236a:	09 f0       	breq	.+2      	; 0x236e <parse_and_send_response+0x484>
    236c:	66 c0       	rjmp	.+204    	; 0x243a <parse_and_send_response+0x550>
    236e:	6a e8       	ldi	r22, 0x8A	; 138
    2370:	73 e0       	ldi	r23, 0x03	; 3
    2372:	83 e5       	ldi	r24, 0x53	; 83
    2374:	94 e0       	ldi	r25, 0x04	; 4
    2376:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    237a:	6d e8       	ldi	r22, 0x8D	; 141
    237c:	73 e0       	ldi	r23, 0x03	; 3
    237e:	83 e5       	ldi	r24, 0x53	; 83
    2380:	94 e0       	ldi	r25, 0x04	; 4
    2382:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    2386:	89 2b       	or	r24, r25
    2388:	91 f4       	brne	.+36     	; 0x23ae <parse_and_send_response+0x4c4>
    238a:	62 e0       	ldi	r22, 0x02	; 2
    238c:	72 e0       	ldi	r23, 0x02	; 2
    238e:	83 e5       	ldi	r24, 0x53	; 83
    2390:	94 e0       	ldi	r25, 0x04	; 4
    2392:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    2396:	ce 01       	movw	r24, r28
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <strtoi.constprop.2>
    239e:	89 2b       	or	r24, r25
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <parse_and_send_response+0x4ba>
    23a2:	4b c0       	rjmp	.+150    	; 0x243a <parse_and_send_response+0x550>
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	0e 94 4a 05 	call	0xa94	; 0xa94 <update_tcrit_hi>
    23ac:	4f c0       	rjmp	.+158    	; 0x244c <parse_and_send_response+0x562>
    23ae:	67 e9       	ldi	r22, 0x97	; 151
    23b0:	73 e0       	ldi	r23, 0x03	; 3
    23b2:	83 e5       	ldi	r24, 0x53	; 83
    23b4:	94 e0       	ldi	r25, 0x04	; 4
    23b6:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    23ba:	89 2b       	or	r24, r25
    23bc:	89 f4       	brne	.+34     	; 0x23e0 <parse_and_send_response+0x4f6>
    23be:	62 e0       	ldi	r22, 0x02	; 2
    23c0:	72 e0       	ldi	r23, 0x02	; 2
    23c2:	83 e5       	ldi	r24, 0x53	; 83
    23c4:	94 e0       	ldi	r25, 0x04	; 4
    23c6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    23ca:	ce 01       	movw	r24, r28
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <strtoi.constprop.2>
    23d2:	89 2b       	or	r24, r25
    23d4:	91 f1       	breq	.+100    	; 0x243a <parse_and_send_response+0x550>
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	0e 94 6f 05 	call	0xade	; 0xade <update_twarn_hi>
    23de:	36 c0       	rjmp	.+108    	; 0x244c <parse_and_send_response+0x562>
    23e0:	61 ea       	ldi	r22, 0xA1	; 161
    23e2:	73 e0       	ldi	r23, 0x03	; 3
    23e4:	83 e5       	ldi	r24, 0x53	; 83
    23e6:	94 e0       	ldi	r25, 0x04	; 4
    23e8:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    23ec:	89 2b       	or	r24, r25
    23ee:	89 f4       	brne	.+34     	; 0x2412 <parse_and_send_response+0x528>
    23f0:	62 e0       	ldi	r22, 0x02	; 2
    23f2:	72 e0       	ldi	r23, 0x02	; 2
    23f4:	83 e5       	ldi	r24, 0x53	; 83
    23f6:	94 e0       	ldi	r25, 0x04	; 4
    23f8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    23fc:	ce 01       	movw	r24, r28
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <strtoi.constprop.2>
    2404:	89 2b       	or	r24, r25
    2406:	c9 f0       	breq	.+50     	; 0x243a <parse_and_send_response+0x550>
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	9a 81       	ldd	r25, Y+2	; 0x02
    240c:	0e 94 c1 05 	call	0xb82	; 0xb82 <update_tcrit_lo>
    2410:	1d c0       	rjmp	.+58     	; 0x244c <parse_and_send_response+0x562>
    2412:	6b ea       	ldi	r22, 0xAB	; 171
    2414:	73 e0       	ldi	r23, 0x03	; 3
    2416:	83 e5       	ldi	r24, 0x53	; 83
    2418:	94 e0       	ldi	r25, 0x04	; 4
    241a:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    241e:	89 2b       	or	r24, r25
    2420:	61 f4       	brne	.+24     	; 0x243a <parse_and_send_response+0x550>
    2422:	62 e0       	ldi	r22, 0x02	; 2
    2424:	72 e0       	ldi	r23, 0x02	; 2
    2426:	83 e5       	ldi	r24, 0x53	; 83
    2428:	94 e0       	ldi	r25, 0x04	; 4
    242a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    242e:	ce 01       	movw	r24, r28
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <strtoi.constprop.2>
    2436:	89 2b       	or	r24, r25
    2438:	29 f4       	brne	.+10     	; 0x2444 <parse_and_send_response+0x55a>
    243a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <send_error_response>
    243e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <flush_packet>
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <parse_and_send_response+0x5d8>
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	9a 81       	ldd	r25, Y+2	; 0x02
    2448:	0e 94 98 05 	call	0xb30	; 0xb30 <update_twarn_lo>
    244c:	89 2b       	or	r24, r25
    244e:	a9 f1       	breq	.+106    	; 0x24ba <parse_and_send_response+0x5d0>
    2450:	f4 cf       	rjmp	.-24     	; 0x243a <parse_and_send_response+0x550>
    2452:	65 eb       	ldi	r22, 0xB5	; 181
    2454:	73 e0       	ldi	r23, 0x03	; 3
    2456:	83 e5       	ldi	r24, 0x53	; 83
    2458:	94 e0       	ldi	r25, 0x04	; 4
    245a:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    245e:	89 2b       	or	r24, r25
    2460:	61 f7       	brne	.-40     	; 0x243a <parse_and_send_response+0x550>
    2462:	62 e0       	ldi	r22, 0x02	; 2
    2464:	72 e0       	ldi	r23, 0x02	; 2
    2466:	83 e5       	ldi	r24, 0x53	; 83
    2468:	94 e0       	ldi	r25, 0x04	; 4
    246a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    246e:	60 e8       	ldi	r22, 0x80	; 128
    2470:	73 e0       	ldi	r23, 0x03	; 3
    2472:	83 e5       	ldi	r24, 0x53	; 83
    2474:	94 e0       	ldi	r25, 0x04	; 4
    2476:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    247a:	89 2b       	or	r24, r25
    247c:	f1 f6       	brne	.-68     	; 0x243a <parse_and_send_response+0x550>
    247e:	62 e0       	ldi	r22, 0x02	; 2
    2480:	72 e0       	ldi	r23, 0x02	; 2
    2482:	83 e5       	ldi	r24, 0x53	; 83
    2484:	94 e0       	ldi	r25, 0x04	; 4
    2486:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    248a:	6a e7       	ldi	r22, 0x7A	; 122
    248c:	73 e0       	ldi	r23, 0x03	; 3
    248e:	83 e5       	ldi	r24, 0x53	; 83
    2490:	94 e0       	ldi	r25, 0x04	; 4
    2492:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    2496:	89 2b       	or	r24, r25
    2498:	81 f6       	brne	.-96     	; 0x243a <parse_and_send_response+0x550>
    249a:	62 e0       	ldi	r22, 0x02	; 2
    249c:	72 e0       	ldi	r23, 0x02	; 2
    249e:	83 e5       	ldi	r24, 0x53	; 83
    24a0:	94 e0       	ldi	r25, 0x04	; 4
    24a2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uartsocket_readpacket>
    24a6:	6d eb       	ldi	r22, 0xBD	; 189
    24a8:	73 e0       	ldi	r23, 0x03	; 3
    24aa:	83 e5       	ldi	r24, 0x53	; 83
    24ac:	94 e0       	ldi	r25, 0x04	; 4
    24ae:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <str_cmp>
    24b2:	89 2b       	or	r24, r25
    24b4:	11 f6       	brne	.-124    	; 0x243a <parse_and_send_response+0x550>
    24b6:	0e 94 2a 09 	call	0x1254	; 0x1254 <log_clear>
    24ba:	8c e6       	ldi	r24, 0x6C	; 108
    24bc:	93 e0       	ldi	r25, 0x03	; 3
    24be:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <uart_writestr>
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	08 95       	ret

000024d6 <str_cmp>:
    24d6:	dc 01       	movw	r26, r24
    24d8:	fb 01       	movw	r30, r22
    24da:	9d 91       	ld	r25, X+
    24dc:	99 23       	and	r25, r25
    24de:	41 f0       	breq	.+16     	; 0x24f0 <str_cmp+0x1a>
    24e0:	81 91       	ld	r24, Z+
    24e2:	89 17       	cp	r24, r25
    24e4:	84 f0       	brlt	.+32     	; 0x2506 <str_cmp+0x30>
    24e6:	98 17       	cp	r25, r24
    24e8:	c4 f7       	brge	.-16     	; 0x24da <str_cmp+0x4>
    24ea:	8f ef       	ldi	r24, 0xFF	; 255
    24ec:	9f ef       	ldi	r25, 0xFF	; 255
    24ee:	08 95       	ret
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	20 81       	ld	r18, Z
    24f6:	21 11       	cpse	r18, r1
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <str_cmp+0x28>
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	91 95       	neg	r25
    2500:	81 95       	neg	r24
    2502:	91 09       	sbc	r25, r1
    2504:	08 95       	ret
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	08 95       	ret

0000250c <update_checksum>:
    250c:	dc 01       	movw	r26, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	61 50       	subi	r22, 0x01	; 1
    2514:	71 09       	sbc	r23, r1
    2516:	42 2f       	mov	r20, r18
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	fd 01       	movw	r30, r26
    251c:	e4 0f       	add	r30, r20
    251e:	f5 1f       	adc	r31, r21
    2520:	46 17       	cp	r20, r22
    2522:	57 07       	cpc	r21, r23
    2524:	20 f4       	brcc	.+8      	; 0x252e <update_checksum+0x22>
    2526:	80 81       	ld	r24, Z
    2528:	98 0f       	add	r25, r24
    252a:	2f 5f       	subi	r18, 0xFF	; 255
    252c:	f4 cf       	rjmp	.-24     	; 0x2516 <update_checksum+0xa>
    252e:	91 95       	neg	r25
    2530:	90 83       	st	Z, r25
    2532:	08 95       	ret

00002534 <random_seed>:
    2534:	61 15       	cp	r22, r1
    2536:	71 05       	cpc	r23, r1
    2538:	81 05       	cpc	r24, r1
    253a:	91 05       	cpc	r25, r1
    253c:	41 f0       	breq	.+16     	; 0x254e <random_seed+0x1a>
    253e:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <m_u>
    2542:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <m_u+0x1>
    2546:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <m_u+0x2>
    254a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <m_u+0x3>
    254e:	21 15       	cp	r18, r1
    2550:	31 05       	cpc	r19, r1
    2552:	41 05       	cpc	r20, r1
    2554:	51 05       	cpc	r21, r1
    2556:	41 f0       	breq	.+16     	; 0x2568 <random_seed+0x34>
    2558:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <m_v>
    255c:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <m_v+0x1>
    2560:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <m_v+0x2>
    2564:	50 93 2b 01 	sts	0x012B, r21	; 0x80012b <m_v+0x3>
    2568:	08 95       	ret

0000256a <random>:
    256a:	4f 92       	push	r4
    256c:	5f 92       	push	r5
    256e:	6f 92       	push	r6
    2570:	7f 92       	push	r7
    2572:	8f 92       	push	r8
    2574:	9f 92       	push	r9
    2576:	af 92       	push	r10
    2578:	bf 92       	push	r11
    257a:	cf 92       	push	r12
    257c:	df 92       	push	r13
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	00 d0       	rcall	.+0      	; 0x2588 <random+0x1e>
    2588:	00 d0       	rcall	.+0      	; 0x258a <random+0x20>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	2b 01       	movw	r4, r22
    2590:	3c 01       	movw	r6, r24
    2592:	29 83       	std	Y+1, r18	; 0x01
    2594:	3a 83       	std	Y+2, r19	; 0x02
    2596:	4b 83       	std	Y+3, r20	; 0x03
    2598:	5c 83       	std	Y+4, r21	; 0x04
    259a:	c0 90 28 01 	lds	r12, 0x0128	; 0x800128 <m_v>
    259e:	d0 90 29 01 	lds	r13, 0x0129	; 0x800129 <m_v+0x1>
    25a2:	e0 90 2a 01 	lds	r14, 0x012A	; 0x80012a <m_v+0x2>
    25a6:	f0 90 2b 01 	lds	r15, 0x012B	; 0x80012b <m_v+0x3>
    25aa:	a7 01       	movw	r20, r14
    25ac:	96 01       	movw	r18, r12
    25ae:	44 27       	eor	r20, r20
    25b0:	55 27       	eor	r21, r21
    25b2:	a9 e6       	ldi	r26, 0x69	; 105
    25b4:	b0 e9       	ldi	r27, 0x90	; 144
    25b6:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    25ba:	67 01       	movw	r12, r14
    25bc:	ee 24       	eor	r14, r14
    25be:	ff 24       	eor	r15, r15
    25c0:	4b 01       	movw	r8, r22
    25c2:	5c 01       	movw	r10, r24
    25c4:	8c 0c       	add	r8, r12
    25c6:	9d 1c       	adc	r9, r13
    25c8:	ae 1c       	adc	r10, r14
    25ca:	bf 1c       	adc	r11, r15
    25cc:	80 92 28 01 	sts	0x0128, r8	; 0x800128 <m_v>
    25d0:	90 92 29 01 	sts	0x0129, r9	; 0x800129 <m_v+0x1>
    25d4:	a0 92 2a 01 	sts	0x012A, r10	; 0x80012a <m_v+0x2>
    25d8:	b0 92 2b 01 	sts	0x012B, r11	; 0x80012b <m_v+0x3>
    25dc:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <m_u>
    25e0:	d0 90 2d 01 	lds	r13, 0x012D	; 0x80012d <m_u+0x1>
    25e4:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <m_u+0x2>
    25e8:	f0 90 2f 01 	lds	r15, 0x012F	; 0x80012f <m_u+0x3>
    25ec:	a7 01       	movw	r20, r14
    25ee:	96 01       	movw	r18, r12
    25f0:	44 27       	eor	r20, r20
    25f2:	55 27       	eor	r21, r21
    25f4:	a0 e5       	ldi	r26, 0x50	; 80
    25f6:	b6 e4       	ldi	r27, 0x46	; 70
    25f8:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    25fc:	67 01       	movw	r12, r14
    25fe:	ee 24       	eor	r14, r14
    2600:	ff 24       	eor	r15, r15
    2602:	c6 0e       	add	r12, r22
    2604:	d7 1e       	adc	r13, r23
    2606:	e8 1e       	adc	r14, r24
    2608:	f9 1e       	adc	r15, r25
    260a:	c0 92 2c 01 	sts	0x012C, r12	; 0x80012c <m_u>
    260e:	d0 92 2d 01 	sts	0x012D, r13	; 0x80012d <m_u+0x1>
    2612:	e0 92 2e 01 	sts	0x012E, r14	; 0x80012e <m_u+0x2>
    2616:	f0 92 2f 01 	sts	0x012F, r15	; 0x80012f <m_u+0x3>
    261a:	d4 01       	movw	r26, r8
    261c:	99 27       	eor	r25, r25
    261e:	88 27       	eor	r24, r24
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	6c 0d       	add	r22, r12
    2626:	7d 1d       	adc	r23, r13
    2628:	8e 1d       	adc	r24, r14
    262a:	9f 1d       	adc	r25, r15
    262c:	29 81       	ldd	r18, Y+1	; 0x01
    262e:	3a 81       	ldd	r19, Y+2	; 0x02
    2630:	4b 81       	ldd	r20, Y+3	; 0x03
    2632:	5c 81       	ldd	r21, Y+4	; 0x04
    2634:	24 19       	sub	r18, r4
    2636:	35 09       	sbc	r19, r5
    2638:	46 09       	sbc	r20, r6
    263a:	57 09       	sbc	r21, r7
    263c:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__udivmodsi4>
    2640:	cb 01       	movw	r24, r22
    2642:	84 0d       	add	r24, r4
    2644:	95 1d       	adc	r25, r5
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	ff 90       	pop	r15
    2654:	ef 90       	pop	r14
    2656:	df 90       	pop	r13
    2658:	cf 90       	pop	r12
    265a:	bf 90       	pop	r11
    265c:	af 90       	pop	r10
    265e:	9f 90       	pop	r9
    2660:	8f 90       	pop	r8
    2662:	7f 90       	pop	r7
    2664:	6f 90       	pop	r6
    2666:	5f 90       	pop	r5
    2668:	4f 90       	pop	r4
    266a:	08 95       	ret

0000266c <strtoi>:
    266c:	cf 93       	push	r28
    266e:	db 01       	movw	r26, r22
    2670:	fc 01       	movw	r30, r24
    2672:	20 81       	ld	r18, Z
    2674:	2d 32       	cpi	r18, 0x2D	; 45
    2676:	21 f4       	brne	.+8      	; 0x2680 <strtoi+0x14>
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	6f ef       	ldi	r22, 0xFF	; 255
    267c:	7f ef       	ldi	r23, 0xFF	; 255
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <strtoi+0x18>
    2680:	61 e0       	ldi	r22, 0x01	; 1
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	11 96       	adiw	r26, 0x01	; 1
    2686:	1c 92       	st	X, r1
    2688:	1e 92       	st	-X, r1
    268a:	fc 01       	movw	r30, r24
    268c:	ca e0       	ldi	r28, 0x0A	; 10
    268e:	20 81       	ld	r18, Z
    2690:	8d 91       	ld	r24, X+
    2692:	9c 91       	ld	r25, X
    2694:	11 97       	sbiw	r26, 0x01	; 1
    2696:	22 23       	and	r18, r18
    2698:	c1 f0       	breq	.+48     	; 0x26ca <strtoi+0x5e>
    269a:	c8 9f       	mul	r28, r24
    269c:	a0 01       	movw	r20, r0
    269e:	c9 9f       	mul	r28, r25
    26a0:	50 0d       	add	r21, r0
    26a2:	11 24       	eor	r1, r1
    26a4:	11 96       	adiw	r26, 0x01	; 1
    26a6:	5c 93       	st	X, r21
    26a8:	4e 93       	st	-X, r20
    26aa:	21 91       	ld	r18, Z+
    26ac:	80 ed       	ldi	r24, 0xD0	; 208
    26ae:	82 0f       	add	r24, r18
    26b0:	8a 30       	cpi	r24, 0x0A	; 10
    26b2:	b8 f4       	brcc	.+46     	; 0x26e2 <strtoi+0x76>
    26b4:	02 2e       	mov	r0, r18
    26b6:	00 0c       	add	r0, r0
    26b8:	33 0b       	sbc	r19, r19
    26ba:	20 53       	subi	r18, 0x30	; 48
    26bc:	31 09       	sbc	r19, r1
    26be:	24 0f       	add	r18, r20
    26c0:	35 1f       	adc	r19, r21
    26c2:	11 96       	adiw	r26, 0x01	; 1
    26c4:	3c 93       	st	X, r19
    26c6:	2e 93       	st	-X, r18
    26c8:	e2 cf       	rjmp	.-60     	; 0x268e <strtoi+0x22>
    26ca:	86 9f       	mul	r24, r22
    26cc:	90 01       	movw	r18, r0
    26ce:	87 9f       	mul	r24, r23
    26d0:	30 0d       	add	r19, r0
    26d2:	96 9f       	mul	r25, r22
    26d4:	30 0d       	add	r19, r0
    26d6:	11 24       	eor	r1, r1
    26d8:	2d 93       	st	X+, r18
    26da:	3c 93       	st	X, r19
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <strtoi+0x7a>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	cf 91       	pop	r28
    26e8:	08 95       	ret

000026ea <vpd_is_data_valid>:
    26ea:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <vpd>
    26ee:	83 35       	cpi	r24, 0x53	; 83
    26f0:	61 f4       	brne	.+24     	; 0x270a <vpd_is_data_valid+0x20>
    26f2:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <vpd+0x1>
    26f6:	85 34       	cpi	r24, 0x45	; 69
    26f8:	41 f4       	brne	.+16     	; 0x270a <vpd_is_data_valid+0x20>
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	20 91 ff 04 	lds	r18, 0x04FF	; 0x8004ff <vpd+0x2>
    2702:	22 35       	cpi	r18, 0x52	; 82
    2704:	21 f0       	breq	.+8      	; 0x270e <vpd_is_data_valid+0x24>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	02 c0       	rjmp	.+4      	; 0x270e <vpd_is_data_valid+0x24>
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	ed ef       	ldi	r30, 0xFD	; 253
    2710:	f4 e0       	ldi	r31, 0x04	; 4
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	31 91       	ld	r19, Z+
    2716:	23 0f       	add	r18, r19
    2718:	35 e0       	ldi	r19, 0x05	; 5
    271a:	e5 33       	cpi	r30, 0x35	; 53
    271c:	f3 07       	cpc	r31, r19
    271e:	d1 f7       	brne	.-12     	; 0x2714 <vpd_is_data_valid+0x2a>
    2720:	22 23       	and	r18, r18
    2722:	11 f0       	breq	.+4      	; 0x2728 <vpd_is_data_valid+0x3e>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	08 95       	ret

0000272a <vpd_write_defaults>:
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	e7 97       	sbiw	r28, 0x37	; 55
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	87 e3       	ldi	r24, 0x37	; 55
    2740:	e3 ea       	ldi	r30, 0xA3	; 163
    2742:	f1 e0       	ldi	r31, 0x01	; 1
    2744:	de 01       	movw	r26, r28
    2746:	11 96       	adiw	r26, 0x01	; 1
    2748:	01 90       	ld	r0, Z+
    274a:	0d 92       	st	X+, r0
    274c:	8a 95       	dec	r24
    274e:	e1 f7       	brne	.-8      	; 0x2748 <vpd_write_defaults+0x1e>
    2750:	67 e3       	ldi	r22, 0x37	; 55
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	ce 01       	movw	r24, r28
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	0e 94 86 12 	call	0x250c	; 0x250c <update_checksum>
    275c:	47 e3       	ldi	r20, 0x37	; 55
    275e:	be 01       	movw	r22, r28
    2760:	6f 5f       	subi	r22, 0xFF	; 255
    2762:	7f 4f       	sbci	r23, 0xFF	; 255
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	0e 94 39 07 	call	0xe72	; 0xe72 <eeprom_writebuf>
    276c:	e7 96       	adiw	r28, 0x37	; 55
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	08 95       	ret

0000277e <vpd_init>:
    277e:	0e 94 82 07 	call	0xf04	; 0xf04 <eeprom_isbusy>
    2782:	89 2b       	or	r24, r25
    2784:	e1 f7       	brne	.-8      	; 0x277e <vpd_init>
    2786:	47 e3       	ldi	r20, 0x37	; 55
    2788:	6d ef       	ldi	r22, 0xFD	; 253
    278a:	74 e0       	ldi	r23, 0x04	; 4
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	0e 94 6d 07 	call	0xeda	; 0xeda <eeprom_readbuf>
    2794:	0e 94 75 13 	call	0x26ea	; 0x26ea <vpd_is_data_valid>
    2798:	89 2b       	or	r24, r25
    279a:	49 f4       	brne	.+18     	; 0x27ae <vpd_init+0x30>
    279c:	0e 94 95 13 	call	0x272a	; 0x272a <vpd_write_defaults>
    27a0:	47 e3       	ldi	r20, 0x37	; 55
    27a2:	6d ef       	ldi	r22, 0xFD	; 253
    27a4:	74 e0       	ldi	r23, 0x04	; 4
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0c 94 6d 07 	jmp	0xeda	; 0xeda <eeprom_readbuf>
    27ae:	08 95       	ret

000027b0 <serial_init>:
    27b0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    27b4:	87 e6       	ldi	r24, 0x67	; 103
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    27bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    27c0:	e1 ec       	ldi	r30, 0xC1	; 193
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	88 e1       	ldi	r24, 0x18	; 24
    27c6:	80 83       	st	Z, r24
    27c8:	86 e0       	ldi	r24, 0x06	; 6
    27ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    27ce:	80 81       	ld	r24, Z
    27d0:	80 6a       	ori	r24, 0xA0	; 160
    27d2:	80 83       	st	Z, r24
    27d4:	08 95       	ret

000027d6 <__vector_18>:
    27d6:	1f 92       	push	r1
    27d8:	0f 92       	push	r0
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	0f 92       	push	r0
    27de:	11 24       	eor	r1, r1
    27e0:	2f 93       	push	r18
    27e2:	3f 93       	push	r19
    27e4:	8f 93       	push	r24
    27e6:	9f 93       	push	r25
    27e8:	ef 93       	push	r30
    27ea:	ff 93       	push	r31
    27ec:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <socket_mode>
    27f0:	88 23       	and	r24, r24
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <__vector_18+0x20>
    27f4:	f0 c0       	rjmp	.+480    	; 0x29d6 <__vector_18+0x200>
    27f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    27fa:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <socket_connected>
    27fe:	99 23       	and	r25, r25
    2800:	09 f4       	brne	.+2      	; 0x2804 <__vector_18+0x2e>
    2802:	e3 c0       	rjmp	.+454    	; 0x29ca <__vector_18+0x1f4>
    2804:	90 ee       	ldi	r25, 0xE0	; 224
    2806:	98 0f       	add	r25, r24
    2808:	9f 35       	cpi	r25, 0x5F	; 95
    280a:	18 f0       	brcs	.+6      	; 0x2812 <__vector_18+0x3c>
    280c:	8d 30       	cpi	r24, 0x0D	; 13
    280e:	09 f0       	breq	.+2      	; 0x2812 <__vector_18+0x3c>
    2810:	59 c0       	rjmp	.+178    	; 0x28c4 <__vector_18+0xee>
    2812:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <rxtail>
    2816:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <rxhead>
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	29 1b       	sub	r18, r25
    281e:	31 09       	sbc	r19, r1
    2820:	21 50       	subi	r18, 0x01	; 1
    2822:	31 09       	sbc	r19, r1
    2824:	2f 73       	andi	r18, 0x3F	; 63
    2826:	33 27       	eor	r19, r19
    2828:	23 2b       	or	r18, r19
    282a:	61 f0       	breq	.+24     	; 0x2844 <__vector_18+0x6e>
    282c:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <rxhead>
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	ec 5c       	subi	r30, 0xCC	; 204
    2834:	fa 4f       	sbci	r31, 0xFA	; 250
    2836:	80 83       	st	Z, r24
    2838:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <rxhead>
    283c:	9f 5f       	subi	r25, 0xFF	; 255
    283e:	9f 73       	andi	r25, 0x3F	; 63
    2840:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <rxhead>
    2844:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <txtail>
    2848:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <txhead>
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	29 1b       	sub	r18, r25
    2850:	31 09       	sbc	r19, r1
    2852:	21 50       	subi	r18, 0x01	; 1
    2854:	31 09       	sbc	r19, r1
    2856:	2f 73       	andi	r18, 0x3F	; 63
    2858:	33 27       	eor	r19, r19
    285a:	23 2b       	or	r18, r19
    285c:	89 f0       	breq	.+34     	; 0x2880 <__vector_18+0xaa>
    285e:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <txhead>
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	ec 58       	subi	r30, 0x8C	; 140
    2866:	fa 4f       	sbci	r31, 0xFA	; 250
    2868:	80 83       	st	Z, r24
    286a:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <txhead>
    286e:	9f 5f       	subi	r25, 0xFF	; 255
    2870:	9f 73       	andi	r25, 0x3F	; 63
    2872:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <txhead>
    2876:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    287a:	90 62       	ori	r25, 0x20	; 32
    287c:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2880:	8d 30       	cpi	r24, 0x0D	; 13
    2882:	09 f0       	breq	.+2      	; 0x2886 <__vector_18+0xb0>
    2884:	c5 c0       	rjmp	.+394    	; 0x2a10 <__vector_18+0x23a>
    2886:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <txtail>
    288a:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <txhead>
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	82 1b       	sub	r24, r18
    2892:	91 09       	sbc	r25, r1
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	8f 73       	andi	r24, 0x3F	; 63
    2898:	99 27       	eor	r25, r25
    289a:	89 2b       	or	r24, r25
    289c:	69 f0       	breq	.+26     	; 0x28b8 <__vector_18+0xe2>
    289e:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <txhead>
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	ec 58       	subi	r30, 0x8C	; 140
    28a6:	fa 4f       	sbci	r31, 0xFA	; 250
    28a8:	8a e0       	ldi	r24, 0x0A	; 10
    28aa:	80 83       	st	Z, r24
    28ac:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <txhead>
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	8f 73       	andi	r24, 0x3F	; 63
    28b4:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <txhead>
    28b8:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <packet_available>
    28bc:	8f 5f       	subi	r24, 0xFF	; 255
    28be:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <packet_available>
    28c2:	a6 c0       	rjmp	.+332    	; 0x2a10 <__vector_18+0x23a>
    28c4:	88 30       	cpi	r24, 0x08	; 8
    28c6:	11 f0       	breq	.+4      	; 0x28cc <__vector_18+0xf6>
    28c8:	8f 37       	cpi	r24, 0x7F	; 127
    28ca:	c1 f5       	brne	.+112    	; 0x293c <__vector_18+0x166>
    28cc:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <rxhead>
    28d0:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <rxtail>
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	82 1b       	sub	r24, r18
    28d8:	91 09       	sbc	r25, r1
    28da:	8f 73       	andi	r24, 0x3F	; 63
    28dc:	99 27       	eor	r25, r25
    28de:	89 2b       	or	r24, r25
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <__vector_18+0x10e>
    28e2:	96 c0       	rjmp	.+300    	; 0x2a10 <__vector_18+0x23a>
    28e4:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <rxhead>
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	ec 5c       	subi	r30, 0xCC	; 204
    28ec:	fa 4f       	sbci	r31, 0xFA	; 250
    28ee:	80 81       	ld	r24, Z
    28f0:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <rxhead>
    28f4:	81 50       	subi	r24, 0x01	; 1
    28f6:	8f 73       	andi	r24, 0x3F	; 63
    28f8:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <rxhead>
    28fc:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <txtail>
    2900:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <txhead>
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	82 1b       	sub	r24, r18
    2908:	91 09       	sbc	r25, r1
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	8f 73       	andi	r24, 0x3F	; 63
    290e:	99 27       	eor	r25, r25
    2910:	89 2b       	or	r24, r25
    2912:	09 f4       	brne	.+2      	; 0x2916 <__vector_18+0x140>
    2914:	7d c0       	rjmp	.+250    	; 0x2a10 <__vector_18+0x23a>
    2916:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <txhead>
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	ec 58       	subi	r30, 0x8C	; 140
    291e:	fa 4f       	sbci	r31, 0xFA	; 250
    2920:	8f e7       	ldi	r24, 0x7F	; 127
    2922:	80 83       	st	Z, r24
    2924:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <txhead>
    2928:	8f 5f       	subi	r24, 0xFF	; 255
    292a:	8f 73       	andi	r24, 0x3F	; 63
    292c:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <txhead>
    2930:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2934:	80 62       	ori	r24, 0x20	; 32
    2936:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    293a:	6a c0       	rjmp	.+212    	; 0x2a10 <__vector_18+0x23a>
    293c:	84 30       	cpi	r24, 0x04	; 4
    293e:	09 f0       	breq	.+2      	; 0x2942 <__vector_18+0x16c>
    2940:	67 c0       	rjmp	.+206    	; 0x2a10 <__vector_18+0x23a>
    2942:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <rxhead>
    2946:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <rxtail>
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	82 1b       	sub	r24, r18
    294e:	91 09       	sbc	r25, r1
    2950:	8f 73       	andi	r24, 0x3F	; 63
    2952:	99 27       	eor	r25, r25
    2954:	89 2b       	or	r24, r25
    2956:	31 f1       	breq	.+76     	; 0x29a4 <__vector_18+0x1ce>
    2958:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <rxhead>
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	ec 5c       	subi	r30, 0xCC	; 204
    2960:	fa 4f       	sbci	r31, 0xFA	; 250
    2962:	80 81       	ld	r24, Z
    2964:	8d 30       	cpi	r24, 0x0D	; 13
    2966:	f1 f0       	breq	.+60     	; 0x29a4 <__vector_18+0x1ce>
    2968:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <rxtail>
    296c:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <rxhead>
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	82 1b       	sub	r24, r18
    2974:	91 09       	sbc	r25, r1
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	8f 73       	andi	r24, 0x3F	; 63
    297a:	99 27       	eor	r25, r25
    297c:	89 2b       	or	r24, r25
    297e:	91 f0       	breq	.+36     	; 0x29a4 <__vector_18+0x1ce>
    2980:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <rxhead>
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	ec 5c       	subi	r30, 0xCC	; 204
    2988:	fa 4f       	sbci	r31, 0xFA	; 250
    298a:	8d e0       	ldi	r24, 0x0D	; 13
    298c:	80 83       	st	Z, r24
    298e:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <rxhead>
    2992:	8f 5f       	subi	r24, 0xFF	; 255
    2994:	8f 73       	andi	r24, 0x3F	; 63
    2996:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <rxhead>
    299a:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <packet_available>
    299e:	8f 5f       	subi	r24, 0xFF	; 255
    29a0:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <packet_available>
    29a4:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <rxtail>
    29a8:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <rxhead>
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	82 1b       	sub	r24, r18
    29b0:	91 09       	sbc	r25, r1
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	8f 73       	andi	r24, 0x3F	; 63
    29b6:	99 27       	eor	r25, r25
    29b8:	89 2b       	or	r24, r25
    29ba:	51 f1       	breq	.+84     	; 0x2a10 <__vector_18+0x23a>
    29bc:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <rxhead>
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	ec 5c       	subi	r30, 0xCC	; 204
    29c4:	fa 4f       	sbci	r31, 0xFA	; 250
    29c6:	84 e0       	ldi	r24, 0x04	; 4
    29c8:	19 c0       	rjmp	.+50     	; 0x29fc <__vector_18+0x226>
    29ca:	83 30       	cpi	r24, 0x03	; 3
    29cc:	09 f5       	brne	.+66     	; 0x2a10 <__vector_18+0x23a>
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <socket_connected>
    29d4:	1d c0       	rjmp	.+58     	; 0x2a10 <__vector_18+0x23a>
    29d6:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <rxtail>
    29da:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <rxhead>
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	82 1b       	sub	r24, r18
    29e2:	91 09       	sbc	r25, r1
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	8f 73       	andi	r24, 0x3F	; 63
    29e8:	99 27       	eor	r25, r25
    29ea:	89 2b       	or	r24, r25
    29ec:	79 f0       	breq	.+30     	; 0x2a0c <__vector_18+0x236>
    29ee:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <rxhead>
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    29f8:	ec 5c       	subi	r30, 0xCC	; 204
    29fa:	fa 4f       	sbci	r31, 0xFA	; 250
    29fc:	80 83       	st	Z, r24
    29fe:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <rxhead>
    2a02:	8f 5f       	subi	r24, 0xFF	; 255
    2a04:	8f 73       	andi	r24, 0x3F	; 63
    2a06:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <rxhead>
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <__vector_18+0x23a>
    2a0c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2a10:	ff 91       	pop	r31
    2a12:	ef 91       	pop	r30
    2a14:	9f 91       	pop	r25
    2a16:	8f 91       	pop	r24
    2a18:	3f 91       	pop	r19
    2a1a:	2f 91       	pop	r18
    2a1c:	0f 90       	pop	r0
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	0f 90       	pop	r0
    2a22:	1f 90       	pop	r1
    2a24:	18 95       	reti

00002a26 <__vector_19>:
    2a26:	1f 92       	push	r1
    2a28:	0f 92       	push	r0
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	0f 92       	push	r0
    2a2e:	11 24       	eor	r1, r1
    2a30:	2f 93       	push	r18
    2a32:	8f 93       	push	r24
    2a34:	9f 93       	push	r25
    2a36:	ef 93       	push	r30
    2a38:	ff 93       	push	r31
    2a3a:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <txhead>
    2a3e:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <txtail>
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	82 1b       	sub	r24, r18
    2a46:	91 09       	sbc	r25, r1
    2a48:	8f 73       	andi	r24, 0x3F	; 63
    2a4a:	99 27       	eor	r25, r25
    2a4c:	89 2b       	or	r24, r25
    2a4e:	79 f0       	breq	.+30     	; 0x2a6e <__vector_19+0x48>
    2a50:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <txtail>
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	ec 58       	subi	r30, 0x8C	; 140
    2a58:	fa 4f       	sbci	r31, 0xFA	; 250
    2a5a:	80 81       	ld	r24, Z
    2a5c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2a60:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <txtail>
    2a64:	8f 5f       	subi	r24, 0xFF	; 255
    2a66:	8f 73       	andi	r24, 0x3F	; 63
    2a68:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <txtail>
    2a6c:	05 c0       	rjmp	.+10     	; 0x2a78 <__vector_19+0x52>
    2a6e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2a72:	8f 7d       	andi	r24, 0xDF	; 223
    2a74:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2a78:	ff 91       	pop	r31
    2a7a:	ef 91       	pop	r30
    2a7c:	9f 91       	pop	r25
    2a7e:	8f 91       	pop	r24
    2a80:	2f 91       	pop	r18
    2a82:	0f 90       	pop	r0
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	0f 90       	pop	r0
    2a88:	1f 90       	pop	r1
    2a8a:	18 95       	reti

00002a8c <serial_rxchars>:
    2a8c:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <rxhead>
    2a90:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <rxtail>
    2a94:	89 1b       	sub	r24, r25
    2a96:	8f 73       	andi	r24, 0x3F	; 63
    2a98:	08 95       	ret

00002a9a <serial_popchar>:
    2a9a:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <rxhead>
    2a9e:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <rxtail>
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	82 1b       	sub	r24, r18
    2aa6:	91 09       	sbc	r25, r1
    2aa8:	8f 73       	andi	r24, 0x3F	; 63
    2aaa:	99 27       	eor	r25, r25
    2aac:	89 2b       	or	r24, r25
    2aae:	c1 f0       	breq	.+48     	; 0x2ae0 <serial_popchar+0x46>
    2ab0:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <rxtail>
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	ec 5c       	subi	r30, 0xCC	; 204
    2ab8:	fa 4f       	sbci	r31, 0xFA	; 250
    2aba:	80 81       	ld	r24, Z
    2abc:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <rxtail>
    2ac0:	9f 5f       	subi	r25, 0xFF	; 255
    2ac2:	9f 73       	andi	r25, 0x3F	; 63
    2ac4:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <rxtail>
    2ac8:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <socket_mode>
    2acc:	99 23       	and	r25, r25
    2ace:	49 f0       	breq	.+18     	; 0x2ae2 <serial_popchar+0x48>
    2ad0:	8d 30       	cpi	r24, 0x0D	; 13
    2ad2:	39 f4       	brne	.+14     	; 0x2ae2 <serial_popchar+0x48>
    2ad4:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <packet_available>
    2ad8:	91 50       	subi	r25, 0x01	; 1
    2ada:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <packet_available>
    2ade:	08 95       	ret
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	08 95       	ret

00002ae4 <serial_isconnected>:
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <socket_mode>
    2aea:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <rxhead>
    2aee:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <rxtail>
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	82 1b       	sub	r24, r18
    2af6:	91 09       	sbc	r25, r1
    2af8:	8f 73       	andi	r24, 0x3F	; 63
    2afa:	99 27       	eor	r25, r25
    2afc:	89 2b       	or	r24, r25
    2afe:	b1 f0       	breq	.+44     	; 0x2b2c <serial_isconnected+0x48>
    2b00:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <rxtail>
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	ec 5c       	subi	r30, 0xCC	; 204
    2b08:	fa 4f       	sbci	r31, 0xFA	; 250
    2b0a:	80 81       	ld	r24, Z
    2b0c:	84 30       	cpi	r24, 0x04	; 4
    2b0e:	71 f4       	brne	.+28     	; 0x2b2c <serial_isconnected+0x48>
    2b10:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <socket_connected>
    2b14:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <rxtail>
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	ec 5c       	subi	r30, 0xCC	; 204
    2b1c:	fa 4f       	sbci	r31, 0xFA	; 250
    2b1e:	80 81       	ld	r24, Z
    2b20:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <rxtail>
    2b24:	8f 5f       	subi	r24, 0xFF	; 255
    2b26:	8f 73       	andi	r24, 0x3F	; 63
    2b28:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <rxtail>
    2b2c:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <socket_connected>
    2b30:	08 95       	ret

00002b32 <serial_is_packet_ready>:
    2b32:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <packet_available>
    2b36:	08 95       	ret

00002b38 <serial_writechar>:
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	07 fe       	sbrs	r0, 7
    2b3c:	0e c0       	rjmp	.+28     	; 0x2b5a <serial_writechar+0x22>
    2b3e:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <txtail>
    2b42:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <txhead>
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	29 1b       	sub	r18, r25
    2b4a:	31 09       	sbc	r19, r1
    2b4c:	21 50       	subi	r18, 0x01	; 1
    2b4e:	31 09       	sbc	r19, r1
    2b50:	2f 73       	andi	r18, 0x3F	; 63
    2b52:	33 27       	eor	r19, r19
    2b54:	23 2b       	or	r18, r19
    2b56:	99 f3       	breq	.-26     	; 0x2b3e <serial_writechar+0x6>
    2b58:	0d c0       	rjmp	.+26     	; 0x2b74 <serial_writechar+0x3c>
    2b5a:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <txtail>
    2b5e:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <txhead>
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	29 1b       	sub	r18, r25
    2b66:	31 09       	sbc	r19, r1
    2b68:	21 50       	subi	r18, 0x01	; 1
    2b6a:	31 09       	sbc	r19, r1
    2b6c:	2f 73       	andi	r18, 0x3F	; 63
    2b6e:	33 27       	eor	r19, r19
    2b70:	23 2b       	or	r18, r19
    2b72:	61 f0       	breq	.+24     	; 0x2b8c <serial_writechar+0x54>
    2b74:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <txhead>
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	ec 58       	subi	r30, 0x8C	; 140
    2b7c:	fa 4f       	sbci	r31, 0xFA	; 250
    2b7e:	80 83       	st	Z, r24
    2b80:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <txhead>
    2b84:	8f 5f       	subi	r24, 0xFF	; 255
    2b86:	8f 73       	andi	r24, 0x3F	; 63
    2b88:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <txhead>
    2b8c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2b90:	80 62       	ori	r24, 0x20	; 32
    2b92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2b96:	08 95       	ret

00002b98 <serial_writestr>:
    2b98:	1f 93       	push	r17
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	ec 01       	movw	r28, r24
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	11 e0       	ldi	r17, 0x01	; 1
    2ba4:	18 0f       	add	r17, r24
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e8 0f       	add	r30, r24
    2baa:	f1 1d       	adc	r31, r1
    2bac:	80 81       	ld	r24, Z
    2bae:	88 23       	and	r24, r24
    2bb0:	21 f0       	breq	.+8      	; 0x2bba <serial_writestr+0x22>
    2bb2:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <serial_writechar>
    2bb6:	81 2f       	mov	r24, r17
    2bb8:	f4 cf       	rjmp	.-24     	; 0x2ba2 <serial_writestr+0xa>
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	1f 91       	pop	r17
    2bc0:	08 95       	ret

00002bc2 <serial_writestr_P>:
    2bc2:	1f 93       	push	r17
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	ec 01       	movw	r28, r24
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	11 e0       	ldi	r17, 0x01	; 1
    2bce:	18 0f       	add	r17, r24
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e8 0f       	add	r30, r24
    2bd4:	f1 1d       	adc	r31, r1
    2bd6:	84 91       	lpm	r24, Z
    2bd8:	88 23       	and	r24, r24
    2bda:	21 f0       	breq	.+8      	; 0x2be4 <serial_writestr_P+0x22>
    2bdc:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <serial_writechar>
    2be0:	81 2f       	mov	r24, r17
    2be2:	f4 cf       	rjmp	.-24     	; 0x2bcc <serial_writestr_P+0xa>
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	08 95       	ret

00002bec <__mulsi3>:
    2bec:	db 01       	movw	r26, r22
    2bee:	8f 93       	push	r24
    2bf0:	9f 93       	push	r25
    2bf2:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__muluhisi3>
    2bf6:	bf 91       	pop	r27
    2bf8:	af 91       	pop	r26
    2bfa:	a2 9f       	mul	r26, r18
    2bfc:	80 0d       	add	r24, r0
    2bfe:	91 1d       	adc	r25, r1
    2c00:	a3 9f       	mul	r26, r19
    2c02:	90 0d       	add	r25, r0
    2c04:	b2 9f       	mul	r27, r18
    2c06:	90 0d       	add	r25, r0
    2c08:	11 24       	eor	r1, r1
    2c0a:	08 95       	ret

00002c0c <__udivmodhi4>:
    2c0c:	aa 1b       	sub	r26, r26
    2c0e:	bb 1b       	sub	r27, r27
    2c10:	51 e1       	ldi	r21, 0x11	; 17
    2c12:	07 c0       	rjmp	.+14     	; 0x2c22 <__udivmodhi4_ep>

00002c14 <__udivmodhi4_loop>:
    2c14:	aa 1f       	adc	r26, r26
    2c16:	bb 1f       	adc	r27, r27
    2c18:	a6 17       	cp	r26, r22
    2c1a:	b7 07       	cpc	r27, r23
    2c1c:	10 f0       	brcs	.+4      	; 0x2c22 <__udivmodhi4_ep>
    2c1e:	a6 1b       	sub	r26, r22
    2c20:	b7 0b       	sbc	r27, r23

00002c22 <__udivmodhi4_ep>:
    2c22:	88 1f       	adc	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	5a 95       	dec	r21
    2c28:	a9 f7       	brne	.-22     	; 0x2c14 <__udivmodhi4_loop>
    2c2a:	80 95       	com	r24
    2c2c:	90 95       	com	r25
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	08 95       	ret

00002c34 <__divmodhi4>:
    2c34:	97 fb       	bst	r25, 7
    2c36:	07 2e       	mov	r0, r23
    2c38:	16 f4       	brtc	.+4      	; 0x2c3e <__divmodhi4+0xa>
    2c3a:	00 94       	com	r0
    2c3c:	07 d0       	rcall	.+14     	; 0x2c4c <__divmodhi4_neg1>
    2c3e:	77 fd       	sbrc	r23, 7
    2c40:	09 d0       	rcall	.+18     	; 0x2c54 <__divmodhi4_neg2>
    2c42:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__udivmodhi4>
    2c46:	07 fc       	sbrc	r0, 7
    2c48:	05 d0       	rcall	.+10     	; 0x2c54 <__divmodhi4_neg2>
    2c4a:	3e f4       	brtc	.+14     	; 0x2c5a <__divmodhi4_exit>

00002c4c <__divmodhi4_neg1>:
    2c4c:	90 95       	com	r25
    2c4e:	81 95       	neg	r24
    2c50:	9f 4f       	sbci	r25, 0xFF	; 255
    2c52:	08 95       	ret

00002c54 <__divmodhi4_neg2>:
    2c54:	70 95       	com	r23
    2c56:	61 95       	neg	r22
    2c58:	7f 4f       	sbci	r23, 0xFF	; 255

00002c5a <__divmodhi4_exit>:
    2c5a:	08 95       	ret

00002c5c <__udivmodsi4>:
    2c5c:	a1 e2       	ldi	r26, 0x21	; 33
    2c5e:	1a 2e       	mov	r1, r26
    2c60:	aa 1b       	sub	r26, r26
    2c62:	bb 1b       	sub	r27, r27
    2c64:	fd 01       	movw	r30, r26
    2c66:	0d c0       	rjmp	.+26     	; 0x2c82 <__udivmodsi4_ep>

00002c68 <__udivmodsi4_loop>:
    2c68:	aa 1f       	adc	r26, r26
    2c6a:	bb 1f       	adc	r27, r27
    2c6c:	ee 1f       	adc	r30, r30
    2c6e:	ff 1f       	adc	r31, r31
    2c70:	a2 17       	cp	r26, r18
    2c72:	b3 07       	cpc	r27, r19
    2c74:	e4 07       	cpc	r30, r20
    2c76:	f5 07       	cpc	r31, r21
    2c78:	20 f0       	brcs	.+8      	; 0x2c82 <__udivmodsi4_ep>
    2c7a:	a2 1b       	sub	r26, r18
    2c7c:	b3 0b       	sbc	r27, r19
    2c7e:	e4 0b       	sbc	r30, r20
    2c80:	f5 0b       	sbc	r31, r21

00002c82 <__udivmodsi4_ep>:
    2c82:	66 1f       	adc	r22, r22
    2c84:	77 1f       	adc	r23, r23
    2c86:	88 1f       	adc	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	1a 94       	dec	r1
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <__udivmodsi4_loop>
    2c8e:	60 95       	com	r22
    2c90:	70 95       	com	r23
    2c92:	80 95       	com	r24
    2c94:	90 95       	com	r25
    2c96:	9b 01       	movw	r18, r22
    2c98:	ac 01       	movw	r20, r24
    2c9a:	bd 01       	movw	r22, r26
    2c9c:	cf 01       	movw	r24, r30
    2c9e:	08 95       	ret

00002ca0 <__divmodsi4>:
    2ca0:	05 2e       	mov	r0, r21
    2ca2:	97 fb       	bst	r25, 7
    2ca4:	1e f4       	brtc	.+6      	; 0x2cac <__divmodsi4+0xc>
    2ca6:	00 94       	com	r0
    2ca8:	0e 94 67 16 	call	0x2cce	; 0x2cce <__negsi2>
    2cac:	57 fd       	sbrc	r21, 7
    2cae:	07 d0       	rcall	.+14     	; 0x2cbe <__divmodsi4_neg2>
    2cb0:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__udivmodsi4>
    2cb4:	07 fc       	sbrc	r0, 7
    2cb6:	03 d0       	rcall	.+6      	; 0x2cbe <__divmodsi4_neg2>
    2cb8:	4e f4       	brtc	.+18     	; 0x2ccc <__divmodsi4_exit>
    2cba:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__negsi2>

00002cbe <__divmodsi4_neg2>:
    2cbe:	50 95       	com	r21
    2cc0:	40 95       	com	r20
    2cc2:	30 95       	com	r19
    2cc4:	21 95       	neg	r18
    2cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cca:	5f 4f       	sbci	r21, 0xFF	; 255

00002ccc <__divmodsi4_exit>:
    2ccc:	08 95       	ret

00002cce <__negsi2>:
    2cce:	90 95       	com	r25
    2cd0:	80 95       	com	r24
    2cd2:	70 95       	com	r23
    2cd4:	61 95       	neg	r22
    2cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cda:	9f 4f       	sbci	r25, 0xFF	; 255
    2cdc:	08 95       	ret

00002cde <__tablejump2__>:
    2cde:	ee 0f       	add	r30, r30
    2ce0:	ff 1f       	adc	r31, r31
    2ce2:	05 90       	lpm	r0, Z+
    2ce4:	f4 91       	lpm	r31, Z
    2ce6:	e0 2d       	mov	r30, r0
    2ce8:	09 94       	ijmp

00002cea <__umulhisi3>:
    2cea:	a2 9f       	mul	r26, r18
    2cec:	b0 01       	movw	r22, r0
    2cee:	b3 9f       	mul	r27, r19
    2cf0:	c0 01       	movw	r24, r0
    2cf2:	a3 9f       	mul	r26, r19
    2cf4:	70 0d       	add	r23, r0
    2cf6:	81 1d       	adc	r24, r1
    2cf8:	11 24       	eor	r1, r1
    2cfa:	91 1d       	adc	r25, r1
    2cfc:	b2 9f       	mul	r27, r18
    2cfe:	70 0d       	add	r23, r0
    2d00:	81 1d       	adc	r24, r1
    2d02:	11 24       	eor	r1, r1
    2d04:	91 1d       	adc	r25, r1
    2d06:	08 95       	ret

00002d08 <__muluhisi3>:
    2d08:	0e 94 75 16 	call	0x2cea	; 0x2cea <__umulhisi3>
    2d0c:	a5 9f       	mul	r26, r21
    2d0e:	90 0d       	add	r25, r0
    2d10:	b4 9f       	mul	r27, r20
    2d12:	90 0d       	add	r25, r0
    2d14:	a4 9f       	mul	r26, r20
    2d16:	80 0d       	add	r24, r0
    2d18:	91 1d       	adc	r25, r1
    2d1a:	11 24       	eor	r1, r1
    2d1c:	08 95       	ret

00002d1e <strlen>:
    2d1e:	fc 01       	movw	r30, r24
    2d20:	01 90       	ld	r0, Z+
    2d22:	00 20       	and	r0, r0
    2d24:	e9 f7       	brne	.-6      	; 0x2d20 <strlen+0x2>
    2d26:	80 95       	com	r24
    2d28:	90 95       	com	r25
    2d2a:	8e 0f       	add	r24, r30
    2d2c:	9f 1f       	adc	r25, r31
    2d2e:	08 95       	ret

00002d30 <_exit>:
    2d30:	f8 94       	cli

00002d32 <__stop_program>:
    2d32:	ff cf       	rjmp	.-2      	; 0x2d32 <__stop_program>
